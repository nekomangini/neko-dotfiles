# =============================================================================
# ASCII art generated from https://manytools.org/hacker-tools/ascii-banner/
# ███╗   ██╗███████╗██╗  ██╗ ██████╗ ███╗   ███╗ █████╗ ███╗   ██╗ ██████╗ ██╗███╗   ██╗██╗
# ████╗  ██║██╔════╝██║ ██╔╝██╔═══██╗████╗ ████║██╔══██╗████╗  ██║██╔════╝ ██║████╗  ██║██║
# ██╔██╗ ██║█████╗  █████╔╝ ██║   ██║██╔████╔██║███████║██╔██╗ ██║██║  ███╗██║██╔██╗ ██║██║
# ██║╚██╗██║██╔══╝  ██╔═██╗ ██║   ██║██║╚██╔╝██║██╔══██║██║╚██╗██║██║   ██║██║██║╚██╗██║██║
# ██║ ╚████║███████╗██║  ██╗╚██████╔╝██║ ╚═╝ ██║██║  ██║██║ ╚████║╚██████╔╝██║██║ ╚████║██║
# ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝╚═╝
# idea from https://github.com/oh-my-fish/theme-fishbone/blob/master/functions/fish_greeting.fish
# =============================================================================

# =============================================================================
# Main greeting function
# =============================================================================
function fish_greeting
  # Display random ASCII art with system info on the right
  # display_greeting_with_info
  display_specific_greeting greeting_lawliet
  # echo ""
  set_color grey
  set_color normal
end

# =============================================================================
# Combined Display Function
# =============================================================================
function display_greeting_with_info -d "Display ASCII art with system info on the right side"
  # Get system info lines
  set -l welcome_msg (welcome_message)
  set -l date_info (show_date_info)
  set -l os_info (show_os_info)
  set -l cpu_info (show_cpu_info)
  set -l mem_info (show_mem_info)
  set -l net_info (show_net_info)
  set -l uptime_info (show_uptime_simple)
  set -l os_age (show_os_age)

  # Create system info array with labels and spacing
  set -l info_lines
  set info_lines $info_lines "$welcome_msg"
  set info_lines $info_lines "" # Empty line for spacing
  # set info_lines $info_lines "Space vessel computer:"
  set info_lines $info_lines "$date_info"
  set info_lines $info_lines "$os_info"
  set info_lines $info_lines "$cpu_info"
  set info_lines $info_lines "$mem_info"
  set info_lines $info_lines "$net_info"
  set info_lines $info_lines "$uptime_info"
  set info_lines $info_lines "$os_age"

  # Get ASCII art lines
  set -l ascii_lines (get_random_ascii_lines)

  # Display combined output
  display_side_by_side $ascii_lines -- $info_lines
end

function get_random_ascii_lines -d "Get ASCII art lines as array"
  # List of available greeting functions
  set -l greetings \
    greeting_freiren \
    greeting_freiren_two \
    greeting_zero_two \
    greeting_itachi \
    greeting_chad_cat \
    greeting_eva_rei \
    greeting_rinachi \
    greeting_pochita \
    greeting_owlkalinevt \
    greeting_rem \
    greeting_goku \
    greeting_lawliet \
    greeting_onepiece \
    greeting_violet_evergreen \
    greeting_chibi \
    greeting_call_of_the_night

  # Pick a random greeting
  set -l random_greeting $greetings[(random 1 (count $greetings))]

  # Capture the output of the greeting function
  eval $random_greeting
end

function display_side_by_side -d "Display ASCII art and system info side by side"
  # Split arguments at --
  set -l ascii_lines
  set -l info_lines
  set -l found_separator 0

  for arg in $argv
    if test "$arg" = --
      set found_separator 1
      continue
    end

    if test $found_separator -eq 0
      set ascii_lines $ascii_lines "$arg"
    else
      set info_lines $info_lines "$arg"
    end
  end

  # Get the maximum number of lines to display
  set -l ascii_count (count $ascii_lines)
  set -l info_count (count $info_lines)
  set -l max_lines (math "max($ascii_count, $info_count)")

  # Calculate padding for system info positioning
  set -l ascii_width 80 # Approximate width of ASCII art

  # Display lines side by side
  for i in (seq 1 $max_lines)
    # Get ASCII line (or empty if beyond array)
    if test $i -le $ascii_count
      set_color cyan
      printf "%s" $ascii_lines[$i]
      set_color normal
    else
      printf "%*s" $ascii_width ""
    end

    # Add spacing and system info
    printf "  "

    # Get info line (or empty if beyond array)
    if test $i -le $info_count
      printf "%s" $info_lines[$i]
    end

    printf "\n"
  end
end

# Alternative function to choose specific greeting
function set_greeting -a greeting_name -d "Set a specific greeting by name"
  switch $greeting_name
    case freiren
      display_specific_greeting greeting_freiren
    case freiren_two
      display_specific_greeting freiren_two
    case zero_two
      display_specific_greeting greeting_zero_two
    case itachi
      display_specific_greeting greeting_itachi
    case chad_cat
      display_specific_greeting greeting_chad_cat
    case eva_rei
      display_specific_greeting greeting_eva_rei
    case rinachi
      display_specific_greeting greeting_rinachi
    case pochita
      display_specific_greeting greeting_pochita
    case owlkalinevt
      display_specific_greeting greeting_owlkalinevt
    case rem
      display_specific_greeting greeting_rem
    case goku
      display_specific_greeting greeting_goku
    case lawliet
      display_specific_greeting greeting_lawliet
    case onepiece
      display_specific_greeting greeting_onepiece
    case violet
      display_specific_greeting greeting_violet_evergreen
    case chibi
      display_specific_greeting greeting_chibi
    case call_of_the-night
      display_specific_greeting greeting_call_of_the_night
    case '*'
      echo "Available greetings: freiren, zero_two, space_cat, itachi, chad_cat, eva_asuka, eva_rei, gear_five, nekoman, rinachi, luckystar, pochita, owlkalinevt"
  end
end

function display_specific_greeting -a greeting_func -d "Display specific greeting with system info"
  # Get system info lines (same as main function)
  set -l welcome_msg (welcome_message)
  set -l date_info (show_date_info)
  set -l os_info (show_os_info)
  set -l cpu_info (show_cpu_info)
  set -l mem_info (show_mem_info)
  set -l net_info (show_net_info)
  set -l uptime_info (show_uptime_simple)
  set -l os_age (show_os_age)

  # Create system info array
  set -l info_lines
  set info_lines $info_lines "$welcome_msg"
  set info_lines $info_lines ""
  # set info_lines $info_lines "Space vessel computer:"
  set info_lines $info_lines "$date_info"
  set info_lines $info_lines "$os_info"
  set info_lines $info_lines "$cpu_info"
  set info_lines $info_lines "$mem_info"
  set info_lines $info_lines "$net_info"
  set info_lines $info_lines "$uptime_info"
  set info_lines $info_lines "$os_age"

  # Get specific ASCII art lines
  set -l ascii_lines (eval $greeting_func)

  # Display combined output
  display_side_by_side $ascii_lines -- $info_lines
end

# =============================================================================
# System Information Functions (Enhanced)
# =============================================================================

function welcome_message -d "Say welcome to user"
  printf "Greetings "
  set_color FFF # white
  printf "%s!" (whoami)
  set_color normal
end

function show_date_info -d "Prints information about date"
  set --local up_time (uptime | cut -d "," -f1 | cut -d "p" -f2 | sed 's/^ *//g')
  set --local time (echo $up_time | cut -d " " -f2)
  set --local formatted_uptime $time
  switch $time
    case days day
      set formatted_uptime "$up_time"
    case min
      set formatted_uptime $up_time"utes"
    case '*'
      set formatted_uptime "$formatted_uptime hours"
  end
  printf "Today is "
  set_color cyan
  printf "%s" (date +%m/%d/%Y)
  set_color normal
  printf ", we are up and running for "
  set_color cyan
  printf "%s" "$formatted_uptime"
  set_color normal
  printf "."
end

function show_os_info -d "Prints operating system info"
  set_color yellow
  printf "OS: "
  # set_color 0F0  # green
  set_color green
  printf "%s" (uname -sm)
  set_color normal
end

function show_cpu_info -d "Prints information about cpu"
  set --local os_type (uname -s)
  set --local cpu_info ""
  if [ "$os_type" = Linux ]
    set --local procs_n (grep -c "^processor" /proc/cpuinfo)
    set --local cores_n (grep "cpu cores" /proc/cpuinfo | head -1 | cut -d ":"  -f2 | tr -d " ")
    set --local cpu_type (grep "model name" /proc/cpuinfo | head -1 | cut -d ":" -f2 | sed 's/^ *//')
    set cpu_info "$procs_n processors, $cores_n cores,$cpu_type"
  else if [ "$os_type" = Darwin ]
    set --local procs_n (system_profiler SPHardwareDataType | grep "Number of Processors" | cut -d ":" -f2 | tr -d " ")
    set --local cores_n (system_profiler SPHardwareDataType | grep "Cores" | cut -d ":" -f2 | tr -d " ")
    set --local cpu_type (system_profiler SPHardwareDataType | grep "Processor Name" | cut -d ":" -f2 | tr -d " ")
    set cpu_info "$procs_n processors, $cores_n cores, $cpu_type"
  end
  set_color yellow
  printf "CPU: "
  # set_color 0F0  # green
  set_color green
  printf "%s" $cpu_info
  set_color normal
end

function show_mem_info -d "Prints memory information"
  set --local os_type (uname -s)
  set --local memory_info ""
  if [ "$os_type" = Linux ]
    set --local total_memory (free -h | grep "Mem" | awk '{print $2}')
    set --local used_memory (free -h | grep "Mem" | awk '{print $3}')
    set memory_info "$used_memory / $total_memory"
  else if [ "$os_type" = Darwin ]
    set --local total_memory (system_profiler SPHardwareDataType | grep "Memory:" | cut -d ":" -f 2 | tr -d " ")
    set memory_info "$total_memory"
  end
  set_color yellow
  printf "Memory: "
  # set_color 0F0  # green
  set_color green
  printf "%s" $memory_info
  set_color normal
end

function show_net_info -d "Prints information about network"
  set --local os_type (uname -s)
  set --local ip ""
  set --local gw ""
  if [ "$os_type" = Linux ]
    set ip (ip route get 1 2>/dev/null | awk '{print $7}' | head -1)
    set gw (ip route | grep default | awk '{print $3}' | head -1)
  else if [ "$os_type" = Darwin ]
    set ip (ifconfig | grep -v "127.0.0.1" | grep "inet " | head -1 | awk '{print $2}')
    set gw (netstat -nr | grep -E "default.*UGSc" | awk '{print $2}' | head -1)
  end

  if test -n "$ip" -a -n "$gw"
    set_color yellow
    printf "Net: "
    # set_color 0F0  # green
    set_color green
    printf "IP %s, Gateway %s" $ip $gw
    set_color normal
  else
    set_color yellow
    printf "Net: "
    # set_color 0F0  # green
    set_color green
    printf "No network connection"
    set_color normal
  end
end

function show_uptime_simple -d "Show simple uptime info"
  set_color yellow
  printf "Uptime:"
  set_color green
  printf "%s"(uptime | sed 's/.*up \([^,]*\).*/\1/')
  set_color normal
end

function show_os_age -d "Show OS installation age in days"
  set --local birth_install (stat -c %W / 2>/dev/null || echo 0)
  set --local current (date +%s)

  if test $birth_install -ne 0
    set --local time_progression (math "$current - $birth_install")
    # Use integer division with expr
    set --local days_difference (expr $time_progression / 86400)
    set_color yellow
    printf "OS Age: "
    set_color green
    printf "%s days" $days_difference
    set_color normal
  else
    # Fallback for systems where stat -c %W is not available
    set_color yellow
    printf "OS Age: "
    set_color green
    printf Unknown
    set_color normal
  end
end

# =============================================================================
# ASCII Art Collection (Anime/Character themed)
# =============================================================================

function greeting_freiren
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⣿⣿⡿⢿⡿⠿⠿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⡿⣿⣿"
  echo -e "⣿⣿⣿⣿⠿⠿⢿⣿⣿⠟⣋⣭⣶⣶⣞⣿⣶⣶⣶⣬⣉⠻⣿⣿⡿⣋⣉⠻⣿⣿⣿"
  echo -e "⣿⢻⣿⠃⣤⣤⣢⣍⣴⣿⢋⣵⣿⣿⣿⣿⣷⣶⣝⣿⣿⣧⣄⢉⣜⣥⣜⢷⢹⢇⢛"
  echo -e "⡏⡦⡁⡸⢛⡴⢣⣾⢟⣿⣿⣿⢟⣾⣧⣙⢿⣿⣿⣿⣿⣿⣿⣿⢩⢳⣞⢿⡏⢷⣾"
  echo -e "⣷⣵⡇⣗⡾⢁⣾⣟⣾⣿⡿⣻⣾⣿⣿⣿⡎⠛⡛⢿⣿⡟⣿⣿⡜⡜⢿⡌⠇⢾⣿"
  echo -e "⣿⣿⠁⣾⠏⣾⣿⣿⣽⣑⣺⣥⣿⣿⣿⣿⣷⣶⣦⣖⢝⢿⣿⣿⣿⡀⠹⣿⣼⢸⣿"
  echo -e "⣿⣿⢰⡏⢡⣿⣿⠐⣵⠿⠛⠛⣿⣿⣿⣿⣿⠍⠚⢙⠻⢦⣼⣿⣿⠁⣄⣿⣿⠘⣿"
  echo -e "⣿⣿⢸⢹⢈⣿⣿⠘⣡⡞⠉⡀⢻⣿⣿⣿⣿⢃⠠⢈⢳⣌⣩⣿⣿⠰⠿⢼⣿⠀⣿"
  echo -e "⣿⠿⣘⠯⠌⡟⣿⡟⣾⣇⢾⡵⣹⣟⣿⣿⣿⣮⣓⣫⣿⣟⢿⣿⢿⡾⡹⢆⣦⣤⢹"
  echo -e "⣅⣛⠶⠽⣧⣋⠳⡓⢿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣫⣸⠏⡋⠷⣛⣫⡍⣶⣿"
  echo -e "⣿⡿⢸⢳⣶⣶⠀⡇⣬⡛⠿⣿⣿⣿⣿⣿⣿⣿⠿⢟⣉⣕⡭⠀⢺⣸⣽⢻⡅⣿⣿"
  echo -e "⣿⡇⣾⡾⣰⡯⠀⡗⣯⣿⣽⡶⠶⠂⢠⣾⣿⠐⠚⠻⢯⣿⠇⠎⡀⣳⣿⣼⡃⣿⣿"
  echo -e "⣿⡇⣟⣇⡟⣧⠀⡗⣿⣿⡿⢡⢖⣀⠼⢟⣻⣤⣔⢦⢸⣿⢀⢆⢡⣿⣯⢹⡃⣿⣿"
  echo -e "⣿⡇⡏⣿⡾⣸⣿⣇⠸⠟⣋⣼⣼⣿⢻⣿⣿⢿⣟⢾⣌⠫⠈⣶⣿⡿⣩⡿⢃⣿⣿"
  echo -e "⣿⣷⡀⠻⡷⢪⢧⡙⠰⣾⣿⣿⣾⡽⣾⣿⡿⣺⣵⣾⣿⡇⡜⣽⠟⢷⣪⣴⣿⣿⣿"
  echo -e "⣿⣿⣿⣾⣿⠏⣤⡁⣷⣽⣿⣿⣿⣿⣷⣶⣿⣿⣿⣿⣿⣱⠸⣱⣦⠙⣿⣿⣿⣾⣿"
end

function greeting_freiren_two
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣫⣡⡿⡵⣫⣾⣿⡿⣋⣥⣶⣷⣾⣿⣿⣵⣦⣌⠻⣿⣿⣿⣿⣷⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢷⠝⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠯⢱⣫⢗⡞⢕⣿⣿⢿⣾⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣜⣿⡽⣿⣿⣷⣿⣿⣿⣿⣿⣷⣹⣿⣟⢿⣿⣿⣿⣯⣇⡸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢠⣏⡟⢟⡾⣾⣿⢳⣿⡿⣷⣿⡿⡫⣾⣿⢿⣿⣿⣿⣿⣿⢻⣿⢿⣿⣿⣧⢿⣿⣿⣿⣿⣯⣿⣿⢸⣿⣿⣿⣇⡘⡽⣌⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⣿⡰⡞⣿⢳⣿⣷⣿⢟⣿⣿⢏⣬⣾⡇⢿⡏⢿⣿⣿⣿⣿⡏⣿⡌⣿⣿⣿⡟⣿⣿⣿⣿⣿⣿⣿⡇⢻⣿⣿⣿⡁⢷⢿⡌⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⢃⠀⢣⣽⣱⡿⣿⡏⣿⣏⣾⡟⣵⣿⣿⣿⣿⡜⣯⢊⢿⣿⣿⣿⣷⣿⡇⣮⢿⣿⣿⣹⣿⣿⣿⣿⣿⣿⣷⢸⣿⣿⣿⣧⣿⡘⣿⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⠼⢠⡽⣿⣿⠇⣿⢸⣟⣾⢯⣾⣿⣿⣿⣿⣿⣷⡜⣯⣎⢻⣿⣿⣿⣿⡇⣿⡎⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡎⣿⢻⣿⣿⣸⡇⢿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣧⢞⡻⣕⢸⢧⣿⣿⢸⣿⣿⣿⢄⢶⣯⣽⢿⣿⣿⣿⣿⣿⣌⢮⢒⠛⣛⡿⣿⢁⢿⣿⡼⣿⣿⣿⣷⣿⣿⣿⣿⣿⣧⢿⠘⣿⣿⣧⡇⠞⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣾⣾⠆⣤⠘⣷⢹⣿⢹⡇⣏⣿⣷⣾⣯⣼⣿⣿⣿⣿⣟⣑⣓⡙⢣⡉⠆⡟⣼⣦⣻⣧⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠸⡆⣿⣿⣿⢗⡖⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⢧⢫⣰⣿⢋⡇⣮⠘⠻⢞⢿⣷⣾⣻⣿⣿⣿⣿⣿⣿⣿⡿⢆⣙⡼⢀⠻⣛⡷⣻⣽⢻⣿⣿⣿⣿⣿⣿⣿⡏⢸⣿⣿⣽⣿⡘⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⡟⣮⢿⡿⣿⣏⣧⠸⠀⢰⣀⢉⠒⠝⢣⣿⣿⣿⣿⣿⣿⣿⣡⣿⡑⠡⠤⠈⠊⠻⢷⠉⣾⡟⣽⣿⣿⣿⣿⢿⡇⡚⣩⣭⡭⠽⠷⠤⣭⡭⠭⣭⣭⡭⠭⢭⣝⢻"
  echo "⣿⣿⣿⣿⣿⣿⣿⡇⣿⡇⢣⡏⣿⣝⡀⡇⣷⡹⣌⠳⠤⠌⢻⣿⣿⣿⣿⣿⣿⠟⠁⣀⠉⣉⠉⠉⡤⢠⡤⡀⣐⣿⣿⣻⣿⡿⣼⠃⣻⣭⣿⣶⣶⢳⣗⣶⣿⣿⣶⡶⣖⡴⣫⣴⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣧⢻⡇⢦⢏⢘⡟⣆⢻⢸⣿⣮⣯⣭⣿⣿⣿⣿⣿⣿⠟⡡⣢⣾⡻⣷⣽⣛⣛⡤⣃⣼⣳⣿⡿⣳⡟⣸⣧⣇⢺⣿⣿⣿⡿⣫⣿⠾⡟⣻⣭⡵⣺⣵⣾⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣄⢷⢸⣣⣣⡻⡿⣆⠃⠛⢿⣿⣿⣟⣽⣛⣿⣯⣴⣿⣿⣿⣿⣿⣿⣶⣶⠞⢈⡿⢡⣿⢿⣿⣟⢰⣟⡌⠀⣺⣿⠛⢉⣪⣥⣶⠿⢛⣭⣾⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡍⣷⠈⢤⠻⡙⣧⣳⣄⣭⣿⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣥⢎⡾⣵⣿⣵⣿⠯⣲⡟⠍⢠⣶⣿⡭⠶⢟⣋⣭⣶⣿⣈⣝⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣇⠸⣦⠡⠈⠋⢿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠫⢋⠜⣿⣿⡟⡡⠚⠋⠐⠖⢀⡭⡥⣰⢸⣿⣿⣿⣿⣿⣧⡜⡝⢿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⡞⣴⡿⣱⢸⣆⢀⢹⣿⣿⣿⡿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣵⡏⢊⣿⠟⣫⡔⢀⢀⣮⠎⢰⢟⢹⡇⡏⠏⣿⣿⡏⣿⣆⢻⡽⢘⣎⢻⡿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡺⣽⡿⡇⠊⣿⢏⣷⡝⢽⢿⣿⣯⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⡰⣚⣵⠿⢋⣴⣏⣜⣎⠆⢯⢧⣿⢸⣷⠂⢻⣿⣿⠘⣿⣕⠻⢯⠻⣆⠙⢿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣫⡾⢷⣿⣾⣿⣿⢏⣾⣿⢳⣷⡜⢽⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢃⢉⣠⣾⣿⠏⢬⢮⠈⢶⡏⣸⣿⣼⣿⣜⡈⣿⣿⣧⢻⣿⣦⠮⡟⣗⡯⣎⠻⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣻⠷⢋⢴⣿⢿⣿⡿⢣⣾⣿⢧⣹⣟⣽⣷⣅⠙⢿⣿⡿⠿⠛⣛⣭⠴⣺⠵⢿⣻⣭⢄⡠⡳⡃⣬⡎⡇⣿⣿⢿⣿⣿⣻⡘⣿⣿⡌⣿⣿⣧⣓⡝⣿⠎⢳⡜⢿"
  echo "⣿⣿⣿⡿⣿⢽⣾⢵⣰⣫⡿⣵⣿⠟⣡⣿⣿⣳⣷⢯⣾⡏⣸⣟⡖⡂⠠⣤⣤⣤⣤⣶⣶⡾⠿⣻⡻⠁⢈⢊⣜⣼⡟⡄⣧⢿⣿⢸⡞⣿⣷⢷⣜⣿⣿⡘⣿⣿⣧⡈⠺⣧⡈⢿⣾"
  echo "⣿⢟⠙⣈⣵⢟⣽⣿⣽⣫⣾⡿⡹⣵⣷⡿⣵⡟⣴⣿⠯⢖⣻⣼⡇⠙⣶⠶⠶⠶⡶⠶⣶⣿⡟⣫⢀⣴⣢⡟⣼⣿⣷⡇⢸⡾⣿⡇⡱⠘⣿⣎⣿⣮⢿⣷⡨⡿⣿⣷⣶⡔⢕⠸⣿"
  echo "⣾⢦⣾⣿⣷⣽⢟⢞⣷⡿⡫⢔⣾⣿⢋⣞⣿⣿⠋⡅⠤⠾⠿⠶⠒⡇⣿⣿⣿⣿⣿⣿⡿⣫⢞⣵⡿⣷⠟⢴⣿⣿⣰⡾⢺⣇⠹⣇⠘⣅⢮⢿⡘⣿⣷⡻⣷⠑⣝⢿⣿⣿⡧⣳⣟"
  echo "⣷⢿⡿⣻⡿⣫⣾⡿⣏⣺⣪⣿⠟⣡⣿⢏⣶⢿⣴⣾⢍⡩⢟⣟⣳⣀⠿⣿⣿⣿⡿⡯⡟⡵⢟⢛⣾⡯⣼⠊⢹⣿⠔⣰⡄⢿⡴⡽⡔⣤⠪⣓⠓⢝⣿⣿⣾⢷⣈⣷⡟⢿⣿⣿⣾"
  echo "⣿⣿⣿⣻⡴⣟⣽⣿⡿⣵⢿⢕⣾⣽⣿⣟⣯⣽⣿⣷⣯⣾⡿⢡⣶⣽⣛⣿⡿⢯⣾⢋⣿⣟⣛⣿⣟⣵⣿⢰⢸⣿⣸⣿⣿⡜⣿⡴⣬⡌⠳⠬⡻⢷⡪⣿⣿⣿⣷⡷⣝⣿⣽⣿⣿"
end

function greeting_zero_two
  echo -e "   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⢀⣄⠀⠀⠀⠀⠀⠀⠀⠀"
  echo -e "⠀⠀⠀⠀⠀⠀⠀⠐⠀⣴⣤⡀⠀⢀⣀⣤⠤⠤⠶⠖⠒⠒⠒⠒⠒⠲⠶⠤⢤⣀⡀⣼⣛⣧⠀⢁⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⠀⠀⠀⠀⠀⢀⣸⣏⢻⣍⠁⠀⢀⡀⠤⠄⠒⠒⠒⠒⠒⠒⠀⠤⠄⠀⠀⢸⡳⢾⢹⡀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⠀⠀⠀⣠⠖⠋⠀⢯⡞⣎⡆⠁⠀⠀⠀⢀⡀⠀⠤⠤⠤⠤⠄⠀⡀⠀⠀⠻⣽⣻⡌⠹⣄⠀⠐⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⠀⢀⡾⠁⠀⠀⢀⢾⣹⢿⣸⠀⣰⠎⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠆⠹⡿⣏⢆⠈⢷⡀⠀⠆⠀⠀   "
  echo -e "⠀⠀⠀⣰⠏⠀⠀⢀⠔⠛⠄⠙⠫⠇⢀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢄⠠⠒⠒⠵⡈⢳⡀⠀⠀⠀   "
  echo -e "⠄⠀⡰⠁⠀⠀⢠⠊⠄⠂⠁⠈⠁⠒⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⡀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠄⢳⡀⠈⠀   "
  echo -e "⠀⣸⠃⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠐⠀⠀⠐⠀⢀⠀⠀⠀⠀⢷⠀⠀   "
  echo -e "⢠⠇⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠀⠀⠀⠀⠀⠰⠀⠀⠀⠀⠀⠀⡄⠀⡀⠆⢰⠀⠀⠀⡄⠀⠀⠀⠸⡄⠀   "
  echo -e "⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠉⠀⡄⠀⢀⠀⠀⡄⠂⠆⠀⠀⠀⠀⢁⠀⢁⠀⢸⠀⢇⠀⡇⠀⠀⠀⠀⣧⠀   "
  echo -e "⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠰⡃⠄⠈⡄⠀⡇⢀⢰⠀⠀⠀⠀⡼⠀⠸⢰⠀⣤⣅⣁⣴⠀⠀⠀⠀⢻⠀   "
  echo -e "⡇⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠱⢀⣁⣤⣧⣴⣧⣄⡇⢸⣸⡄⠀⢀⣆⠀⣦⠊⢹⣿⣿⡛⠻⢿⠀⠀⠀⠀⢸⡇   "
  echo -e "⡇⠀⠀⠀⠀⠀⠀⠀⠀⣃⠀⠀⢴⣿⠟⠉⢈⣿⣿⣿⡟⠇⠀⠀⠀⠀⠀⠀⢸⣶⣿⣿⡿⣧⠀⢸⡇⠀⢃⠀⢸⡇   "
  echo -e "⡇⠀⠀⠀⠀⠀⠀⠀⡀⢉⡄⠀⢸⠁⠀⣷⣾⣿⣿⡟⣿⠀⠀⠀⠀⠀⠀⠀⠀⢧⠙⠋⢁⡟⢀⡦⢧⠀⠸⡇⢸⡇   "
  echo -e "⣿⠀⠀⠀⠀⠀⠀⢀⠔⠪⡄⠀⠸⣁⠀⠹⣉⠉⠉⢠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠈⠓⢲⠛⠆⢉⠀⢸⠀⢀⢇⢸⡇   "
  echo -e "⢿⠀⠀⠀⠀⠀⢀⠃⡐⠐⣴⠀⠀⠏⠉⠖⠉⠋⡙⠁⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⢀⡠⠀⠊⠄⠌⢘⠀⠀⠸⢸⠀   "
  echo -e "⢸⠀⠀⠀⠀⠀⠈⣆⢃⠘⠘⡀⠀⡸⡘⡐⡐⠠⠁⠀⡴⡖⣲⠒⠊⠉⠉⠉⠙⢿⣤⡇⠀⠀⠀⠈⢐⠀⠀⠁⣿⠀   "
  echo -e "⠘⡇⠀⠀⠀⠀⠀⠈⢶⠬⣁⡇⠀⠀⠑⠐⠤⠐⠀⠀⡇⠉⠀⠀⠀⠀⠀⠀⠀⠀⢙⠇⠀⠀⠀⠀⣼⢀⠀⠀⣿⠀   "
  echo -e "⠀⣇⠀⠀⠀⢰⠀⠀⠈⠀⠂⡇⠀⠃⢡⠀⠀⠀⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⣠⠎⠀⠀⢀⡴⡞⡉⠈⠀⠀⣿⠀   "
  echo -e "⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⡀⡇⠀⢰⠈⡷⡀⠀⠀⠀⠀⠸⢶⣀⠀⠀⢀⣰⠎⠁⢀⡶⠏⠁⣈⠆⠁⡀⠰⢸⡇⠀   "
  echo -e "⠀⢸⡀⢸⠀⠀⠆⠀⠀⠀⠀⡇⠀⠀⠀⢡⡄⡏⢆⠒⠢⠤⠤⠤⢨⠥⡴⠒⠚⠉⠉⠀⠀⡠⠁⡘⢠⠁⢀⠆⡇⠀   "
  echo -e "⠀⢸⡇⠀⡀⠀⠀⠀⠀⢠⢠⠁⠀⠘⡀⠠⣷⠃⠀⠀⠀⠀⠉⢰⠈⢱⠄⡀⡄⠀⢸⠀⠐⠀⠰⠁⠀⠀⡞⠄⣷⠀   "
  echo -e "⠀⠀⣷⠀⡇⠀⠀⠀⠸⠀⡈⠀⠀⢂⠃⠀⡄⠇⠀⠀⠀⠀⠀⢔⠳⠀⠀⠣⠍⠒⠤⣰⠁⢠⠃⢠⠀⠀⠅⠀⢻⡀   "
  echo -e "⠀⠀⠉⠀⠁⠀⠀⠀⠀⠀⠁⠀⠀⠈⠀⠀⠁⠈⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠈⠁⠀⠈⠀⠁⠀⠈⠀⠀⠁⠀⠈⠁   "
end

function greeting_itachi
  echo -e "⠀⠀⠀⠀⠀⢰⢸⣶⣄⣀⣤⣾⡄⠀⠀⠀⠀⠀⠀"
  echo -e "⠀⠀⠀⠀⠀⣼⠀⠀⣀⣀⡀⠀⠁⢠⠀⠀⠀⠀⠀"
  echo -e "⠀⠀⠀⠀⡈⢿⠀⡴⣯⡦⠀⠀⠀⢸⠀⠀⠀⠀⠀"
  echo -e "⠀⠀⠀⠀⣇⣼⣄⣀⣀⣀⡀⠤⠄⡼⠁⠀⠀⠀⠀"
  echo -e "⠀⠀⢠⠀⢿⣿⣿⣍⠉⢉⣭⣟⣿⡷⢀⢀⠀⠀⠀"
  echo -e "⠀⣄⢸⠀⠉⠉⢁⠃⠀⠀⠱⠈⠹⠁⢸⢸⣸⠀⠀"
  echo -e "⢃⣿⢸⡇⠀⡠⠁⠀⠀⠀⠀⠑⡀⠀⣾⢸⣿⠀⠀"
  echo -e "⠸⡟⣿⡇⠀⠀⠀⠈⠙⠋⠀⠀⠀⡸⡿⣼⢻⠀⠀"
  echo -e "⠀⠇⢹⣷⢀⠀⠀⠈⠭⠥⠀⠀⠐⡁⣿⡟⠸⠀⠀"
  echo -e "⠀⠈⠀⢻⢾⣷⣄⡀⠀⠀⠀⣠⣾⠇⠏⠀⠀⠀⠀"
  echo -e "⠀⠀⠀⠈⠄⠛⠛⠛⠓⠒⠚⠛⠛⠀⠀⠀⠀⠀⠀"
  echo -e "⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠂"
  echo -e "⣿⣦⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⠎⠀"
  echo -e "⠇⠉⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠻⠛⠁⠀⠀"
end

function greeting_chad_cat
  echo -e "⠄⠄⠄⠄⠄⢀⣼⢺⢽⢽⡪⡪⡢⠡⢐⠅⡓⢄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄"
  echo -e "⠄⠄⠄⣀⡴⣓⢌⢓⢏⢗⢕⢕⢕⠥⡑⡌⡄⢌⠕⡒⢄⣀⠄⠄⠄⠄⠄ "
  echo -e "⣠⣯⡳⡹⡸⡘⡔⢌⠪⡪⢪⢊⢎⠢⡑⡈⠄⠕⠠⠁⠂⢍⢒⠤⣀⠄⠄ "
  echo -e "⣰⣳⡣⣙⠘⡎⢮⢂⢆⢊⠜⡌⢎⢪⢊⠢⡊⢌⠪⡨⠠⠈⠔⡐⠈⠄⡁⠉"
  echo -e "⡗⣇⡿⡽⣕⢌⢌⢢⢪⢪⢪⠸⡜⢄⠕⡑⡐⠠⢱⠨⢈⠄⠅⠢⢀⠐⠄⠅"
  echo -e "⣟⢮⢯⢯⡺⡱⡱⡱⠩⢳⢧⣳⡹⡌⡂⠄⡕⠌⠐⡨⠄⠄⡅⠅⠅⠄⠡⡁"
  echo -e "⡿⣽⡸⢽⢮⢈⠜⡸⡅⠠⡈⠙⢾⣳⡠⡰⡹⡌⣀⠂⠄⡨⠄⠨⠨⠄⠅⡂"
  echo -e "⣟⣗⣟⣮⢸⢰⢑⢄⠳⣀⠃⠄⠄⢻⣾⡽⣕⢕⠔⡁⡂⡢⢐⠠⡑⢌⢂⢪"
  echo -e "⣟⣾⣺⣞⡿⣦⣑⡐⡡⢘⠲⣔⣄⢌⢷⣿⡗⡕⡕⡐⠔⡈⡢⣱⣡⢕⠬ "
  echo -e "⢗⢷⣗⣯⡿⣿⣽⣾⣪⡲⡰⡐⢜⢐⢑⣿⢝⢜⢐⠌⡰⢰⠋⠦⠄⠄⢸⠁"
  echo -e "⣣⡣⡜⡳⣟⣿⣽⣾⢳⢝⢜⢌⠢⡂⡂⠿⡨⡢⡑⡌⡎⠊⢆⣀⡠⠤⡒⠄"
  echo -e "⢕⠕⡫⠦⣙⢾⣻⡾⡵⣜⡐⢔⢕⢅⠪⡨⢪⡇⡇⡣⠑⠄⠄⠠⢀⢡⡰⠁"
  echo -e "⡣⢮⢲⡒⡜⢌⠈⢿⣽⣲⢕⢦⡳⡠⢷⡑⢕⢣⠱⡁⠠⠄⠅⢬⠊⠁⠄⠄"
  echo -e "⡪⡳⡱⡪⡢⡣⢑⠄⢻⣊⠙⢷⢯⣗⠘⣕⡑⠐⡁⢔⠨⠠⡑⡸⣀⠄⠄⠄"
  echo -e "⡪⡘⠌⠢⡑⠨⠢⡑⢄⠹⣳⢶⡰⣄⡁⠩⢖⢧⢣⠑⠌⢊⠐⢔⠈⡓⡄⠄"
  echo -e "⢕⢝⢜⢐⠄⡁⠁⠔⠄⢅⠘⠝⠟⠮⡺⠘⠄⠄⡂⢈        "
end

function greeting_eva_rei
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⣠⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣡⣾⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣟⠻⣿⣿⣿⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⡿⢫⣷⣿⣿⣿⣿⣿⣿⣿⣾⣯⣿⡿⢧⡚⢷⣌⣽⣿⣿⣿⣿⣿⣶⡌⣿⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⠇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣇⣘⠿⢹⣿⣿⣿⣿⣿⣻⢿⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⠀⢸⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⡟⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣻⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⡇⠀⣬⠏⣿⡇⢻⣿⣿⣿⣿⣿⣿⣿⣷⣼⣿⣿⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⠀⠈⠁⠀⣿⡇⠘⡟⣿⣿⣿⣿⣿⣿⣿⣿⡏⠿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣇⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⡏⠀⠀⠐⠀⢻⣇⠀⠀⠹⣿⣿⣿⣿⣿⣿⣩⡶⠼⠟⠻⠞⣿⡈⠻⣟⢻⣿⣿⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⢿⠀⡆⠀⠘⢿⢻⡿⣿⣧⣷⢣⣶⡃⢀⣾⡆⡋⣧⠙⢿⣿⣿⣟⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⡥⠂⡐⠀⠁⠑⣾⣿⣿⣾⣿⣿⣿⡿⣷⣷⣿⣧⣾⣿⣿⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⡿⣿⣍⡴⠆⠀⠀⠀⠀⠀⠀⠀⠀⣼⣄⣀⣷⡄⣙⢿⣿⣿⣿⣿⣯⣶⣿⣿⢟⣾⣿⣿⢡⣿⣿⣿⣿⣿"
  echo -e "⣿⡏⣾⣿⣿⣿⣷⣦⠀⠀⠀⢀⡀⠀⠀⠠⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⣡⣾⣿⣿⢏⣾⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⡴⠀⠀⠀⠀⠀⠠⠀⠰⣿⣿⣿⣷⣿⠿⠿⣿⣿⣭⡶⣫⠔⢻⢿⢇⣾⣿⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⡿⢫⣽⠟⣋⠀⠀⠀⠀⣶⣦⠀⠀⠀⠈⠻⣿⣿⣿⣾⣿⣿⣿⣿⡿⣣⣿⣿⢸⣾⣿⣿⣿⣿⣿⣿⣿"
  echo -e "⡿⠛⣹⣶⣶⣶⣾⣿⣷⣦⣤⣤⣀⣀⠀⠀⠀⠀⠀⠀⠉⠛⠻⢿⣿⡿⠫⠾⠿⠋⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo -e "⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⡆⣠⢀⣴⣏⡀⠀⠀⠀⠉⠀⠀⢀⣠⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo -e "⠿⠛⠛⠛⠛⠛⠛⠻⢿⣿⣿⣿⣿⣯⣟⠷⢷⣿⡿⠋⠀⠀⠀⠀⣵⡀⢠⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo -e "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠛⢿⣿⣿⠂⠀⠀⠀⠀⠀⢀⣽⣿⣿⣿⣿⣿⣿⣿⣍⠛⠿⣿⣿⣿⣿⣿⣿"
end

function greeting_rinachi
  # from chat message of rinaki_ch(twitch)
  echo -e "⡆⣐⢕⢕⢕⢕⢕⢕⢕⢕⠅⢗⢕⢕⢕⢕⢕⢕⢕⠕⠕⢕⢕⢕⢕⢕⢕⢕⢕⢕"
  echo -e "⢐⢕⢕⢕⢕⢕⣕⢕⢕⠕⠁⢕⢕⢕⢕⢕⢕⢕⢕⠅⡄⢕⢕⢕⢕⢕⢕⢕⢕⢕"
  echo -e "⢕⢕⢕⢕⢕⠅⢗⢕⠕⣠⠄⣗⢕⢕⠕⢕⢕⢕⠕⢠⣿⠐⢕⢕⢕⠑⢕⢕⠵⢕"
  echo -e "⢕⢕⢕⢕⠁⢜⠕⢁⣴⣿⡇⢓⢕⢵⢐⢕⢕⠕⢁⣾⢿⣧⠑⢕⢕⠄⢑⢕⠅⢕"
  echo -e "⢕⢕⠵⢁⠔⢁⣤⣤⣶⣶⣶⡐⣕⢽⠐⢕⠕⣡⣾⣶⣶⣶⣤⡁⢓⢕⠄⢑⢅⢑"
  echo -e "⠍⣧⠄⣶⣾⣿⣿⣿⣿⣿⣿⣷⣔⢕⢄⢡⣾⣿⣿⣿⣿⣿⣿⣿⣦⡑⢕⢤⠱⢐"
  echo -e "⢠⢕⠅⣾⣿⠋⢿⣿⣿⣿⠉⣿⣿⣷⣦⣶⣽⣿⣿⠈⣿⣿⣿⣿⠏⢹⣷⣷⡅⢐"
  echo -e "⣔⢕⢥⢻⣿⡀⠈⠛⠛⠁⢠⣿⣿⣿⣿⣿⣿⣿⣿⡀⠈⠛⠛⠁⠄⣼⣿⣿⡇⢔"
  echo -e "⢕⢕⢽⢸⢟⢟⢖⢖⢤⣶⡟⢻⣿⡿⠻⣿⣿⡟⢀⣿⣦⢤⢤⢔⢞⢿⢿⣿⠁⢕"
  echo -e "⢕⢕⠅⣐⢕⢕⢕⢕⢕⣿⣿⡄⠛⢀⣦⠈⠛⢁⣼⣿⢗⢕⢕⢕⢕⢕⢕⡏⣘⢕"
  echo -e "⢕⢕⠅⢓⣕⣕⣕⣕⣵⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣷⣕⢕⢕⢕⢕⡵⢀⢕⢕"
  echo -e "⢑⢕⠃⡈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢃⢕⢕⢕"
  echo -e "⣆⢕⠄⢱⣄⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢁⢕⢕⠕⢁"
  echo -e "⣿⣦⡀⣿⣿⣷⣶⣬⣍⣛⣛⣛⡛⠿⠿⠿⠛⠛⢛⣛⣉⣭⣤⣂⢜⠕⢑⣡⣴⣿"
end

function greeting_pochita
  echo -e "   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀    "
  echo -e "⠀⠀⠀⠀⢠⣿⣄⣤⣤⣤⣤⣼⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⣠⣾⣿⣻⡵⠖⠛⠛⠛⢿⣿⣶⣴⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠏⢷⡄⠀⠀⠀   "
  echo -e "⣤⣤⡾⣯⣿⡿⠋⠀⠀⠀⠀⠀⠀⠈⠙⢿⣿⣷⣤⣴⣾⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠏⠀⠈⢻⣦⡀⠀   "
  echo -e "⢹⣿⣴⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣿⣿⣄⡀⢀⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⠀⠈⠻⣦⠀⠀⣼⠋⠀⠀   "
  echo -e "⣼⢉⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢿⣿⣿⣿⣥⠤⠴⣶⣶⣶⣶⣶⣶⣶⣶⣾⣿⠿⣿⣿⣿⣿⡇⣸⠋⠻⣿⣷   "
  echo -e "⡏⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢿⣿⣶⣶⣿⣟⣿⣟⣛⣭⣉⣩⣿⣿⡀⣼⣿⣿⣿⣿⣿⣄⠀⣸⣿   "
  echo -e "⡇⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⠿⠿⠛⠛⠛⠛⠛⠻⣿⣿⣭⣉⢉⣿⣿⠟⣰⣿⡟   "
  echo -e "⣷⠸⣇⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡴⠞⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⠀⠉⣿⣿⡏⢀⣿⡟⠀   "
  echo -e "⠹⣦⣿⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠞⠋⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⣀⠀⠀⠀⠀⣼⣿⡿⢫⣿⣿⡁⠀   "
  echo -e "⠀⠀⠙⣿⡿⣿⣿⣷⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠁⠀⠀⠀⠀⠀⠀⠀⣀⣤⠶⠿⢯⡈⠙⣧⡀⠀⠀⣿⣄⣴⣿⣿⠉⠻⣦   "
  echo -e "⠀⠀⠰⠿⠛⠛⠻⣿⣿⣿⣷⣦⣀⠀⠀⠀⠀⠀⠀⣴⠏⠀⠀⠀⠀⠀⠀⠀⣰⣿⠉⠀⠀⠀⠚⣷⠀⠘⡇⠀⠀⠀⠙⠛⠉⠁⠀⠀⠈   "
  echo -e "⠀⠀⠀⠀⠀⠀⠀⠀⣹⣿⣽⡿⣿⣷⣦⣀⠀⠀⢰⡟⠀⠀⠀⠀⠀⠀⠀⠀⣿⠽⣄⠀⠀⠀⣠⠟⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠙⠻⣿⣿⣟⣷⣦⣼⡇⠀⠀⠀⠀⠀⠀⠀⠀⠛⢧⡉⠛⠛⠛⠁⠀⣠⡾⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡟⢉⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠳⠶⠶⠶⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠈⠉⠉⠉⣻⣿⣇⡀⠀⠀⠀⠀⠀⣤⡶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⣄⠀⣠⣾⡿⠁⠙⢷⣦⣦⣤⣴⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⠀⠀⠀⢀⣴⠶⣆⠀⠀⠀⣾⠉⢻⣿⣿⡀⠀⠀⢿⣿⢉⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⠀⠀⢀⣿⠁⢠⡟⠀⠀⠀⣿⠀⠘⣯⠉⠃⠀⠀⠈⢁⣸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⠀⣀⣼⡿⠀⠘⣷⠀⠀⠀⣿⠀⠀⢻⡶⠞⢛⡶⠚⢻⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⢀⡾⠋⠁⣀⠀⠀⠈⠳⣄⠀⢸⡆⠀⠈⢷⣄⠟⢁⣠⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡇⠀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⢸⡇⠀⠀⠈⢻⡄⠀⠀⠘⢷⣤⣷⡀⠀⠀⠙⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⣧⠀⠀⠀⠀⣿⡀⠀⠀⠀⠈⢻⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣇⠀⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⢹⣄⠀⠀⢀⣿⠁⡀⠀⠀⠀⠀⠻⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣆⠀⠀⠀⠀⠀⠀⠀   "
  echo -e "⠀⠀⠀⠀⠉⠛⠛⠛⠉⠻⣿⡦⠀⠀⠀⠀⠈⢻⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⡇⠀⠀⠀⠀⠀⠀   "
end

function greeting_owlkalinevt
  # from OwlkalineVT(twitch) 
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⣛⣭⣵⣶⣶⣿⣿⣿⣿⣿⣿⣶⣮⡟⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⡿⣛⣵⣾⡿⠟⠛⠉⠉⠀⠀⠀⠀⠀⣠⣤⣬⣽⡿⣸⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⡿⣫⣾⡿⠛⠁⠀⠸⣷⡄⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣦⡻⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⡟⣵⣿⣿⡇⠰⣦⡀⠀⢹⣿⡆⠀⣶⡀⠀⠀⢹⣿⡟⢻⣿⣿⡸⣿⣿"
  echo -e "⣿⣿⣿⢣⣾⣿⣿⣿⡇⠀⠹⣿⡄⠀⣿⣿⡀⢸⣷⠀⠀⢸⠋⠀⠸⣿⣿⡇⢻⣿"
  echo -e "⣿⣿⢃⣿⡟⢸⣿⣿⣧⠀⠀⢿⣿⠀⢸⣿⡇⢸⣿⠀⠀⠀⠀⠀⠀⣿⣿⡇⢸⣿"
  echo -e "⡿⢣⣾⡿⠁⠀⣿⠛⢻⡄⠀⢸⣿⠀⢸⣿⡇⢸⣿⠀⠀⠀⡀⠀⠀⣿⣿⡇⢸⣿"
  echo -e "⡇⣿⣿⠄⠀⠀⠘⣶⣾⠇⠀⢸⣿⠀⣼⣿⠁⣼⡟⠀⠀⠀⠸⣦⣸⣿⣿⢇⣿⣿"
  echo -e "⣿⣜⢿⣷⣄⠀⠀⠈⠉⠀⠀⣿⠇⢰⣿⠃⢰⠟⠀⠀⠀⠀⠀⣿⣿⠿⣫⣾⣿⣿"
  echo -e "⣿⣿⣦⣝⢿⣷⣦⣀⠀⠀⠀⠉⠀⠛⠁⠀⠀⠀⠀⠀⠀⠀⣸⣿⢇⣾⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣷⣬⣛⢿⣿⣶⣤⣄⣀⣀⠐⢤⣤⣀⣀⣀⣤⣾⡿⣫⣿⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⣮⣭⣛⡛⠿⠿⠿⠿⠟⠛⠛⠛⣛⣭⣾⣿⣿⣿⣿⣿⣿⣿"
  echo -e "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
end

function greeting_rem
  echo "⠀⠀⠀⠀⣄⠀⠀⢰⡆⠀⠀⢠⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡠⢀⢀⢠⣤⣄⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⢠⡄⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⣿⡄⠀⣾⡇⠀⠀⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠤⢒⣭⠉⠥⢌⡋⠐⠀⠠⠦⠍⢉⡃⢴⠂⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣧⠀⠀⢸⡇⠀⢀⡆⠀⠀⠀"
  echo "⠈⣦⠀⠀⢻⡇⠀⣿⡇⠀⢸⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢤⠈⠔⠀⣉⣥⣶⣶⣬⣭⣼⣿⣿⣶⣤⣄⠰⠶⠐⠀⢁⡀⠀⠀⠀⠀⠆⡀⢀⣀⡀⠀⣶⣒⡀⠀⠀⠀⠀⠀⠀⡀⠀⠀⣿⡀⠀⢸⡇⠀⣸⡇⠀⠀⠀"
  echo "⠀⠸⣇⠀⢸⣧⠀⣿⡇⠀⣿⠇⠀⠀⣀⣀⣀⣀⣀⣀⣚⣒⣒⣋⣛⣚⣡⡤⠁⠴⠠⠗⣸⣿⣿⣿⡟⣻⣿⣿⣿⣿⣿⡿⣿⣿⣿⣶⣿⣷⣄⠁⢀⢼⡴⢰⣾⣷⣿⣿⣿⣶⣶⣶⣿⣭⣿⣿⣿⣿⣤⣤⣙⣀⢹⣇⠀⢸⡇⠀⣿⠁⠂⣰⠃"
  echo "⠀⠀⢻⣆⣸⣿⣶⣿⣷⣾⣿⠀⣴⡞⢋⣨⡍⢻⣿⣿⣿⣿⣿⣿⣿⣿⠟⣠⠃⣰⣿⣿⡟⣻⣿⣿⢡⣿⣿⣿⣿⣿⣿⡇⢻⣿⣿⣿⣿⣏⢻⣿⠰⠖⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢛⡛⠻⣿⣿⢸⣿⣄⣼⣇⣸⣿⠘⢰⡏⣸"
  echo "⠀⠀⠈⣿⣿⠿⢛⣋⣵⡿⢛⡀⠊⣰⡿⢃⣴⣿⣿⣿⣿⣿⣿⣿⡿⠏⣰⡟⣰⣿⣿⡟⣰⣿⣿⡏⣼⣿⣿⣿⣿⣿⣿⡇⡌⠿⢿⣇⢻⡿⠂⢿⣷⠖⠀⠰⠀⠀⠛⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠹⣷⡌⠻⢸⣿⣛⠻⢿⣿⣿⣦⡙⢰⣿"
  echo "⠀⠀⡆⣾⣷⣾⣿⣿⢋⣴⣿⣿⣿⡟⢁⣾⣿⣿⣿⣿⣿⣿⣿⣿⡟⣰⣿⠁⡁⡌⢻⢃⡿⡀⣿⡇⣿⣿⣿⣿⣿⣿⣿⡇⣿⣄⢠⡤⠀⠀⠺⠘⣿⠀⠀⠀⠀⠀⡄⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡘⣿⣦⣶⣭⠻⣿⣶⣬⣝⣿⡇⣿⣿"
  echo "⢸⢹⡇⠸⣿⣿⣿⣯⣾⣿⣿⣿⠟⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⢰⡏⣤⣃⣴⣾⢸⣷⣶⣿⢰⣿⣿⣿⣿⡇⣿⣿⢇⣿⣿⣆⠀⣴⢸⣶⡆⣿⠀⠈⠀⠀⠈⠁⢁⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠘⣿⣿⣿⣷⠸⣿⣿⣿⣿⢀⣿⣿"
  echo "⢸⢻⣿⡀⢻⣿⣿⣿⣿⣿⡿⢋⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⡄⣿⠃⣿⣿⣿⣿⢸⡇⣿⣿⢸⣿⣿⣿⣿⡇⣿⣿⢠⣴⣶⣮⣤⠹⡌⣿⡇⣿⡏⠀⡆⠀⠐⠄⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡘⢿⣿⣿⣷⣿⣿⣿⡏⣸⣿⣿"
  echo "⢸⢿⣿⣷⠠⢉⣩⣽⣿⡷⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢁⠁⣿⠀⣿⣿⡏⣿⢸⡇⣿⣿⢸⢿⣿⣿⣿⠇⣿⡇⣜⣩⠽⠻⠿⣷⡀⣿⡇⣿⡧⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠙⣉⣽⣟⠻⠏⣰⣿⣿⣿"
  echo "⣾⡿⠟⣋⠀⣿⣿⣿⡿⠇⣀⠉⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⠀⣿⡇⣿⣿⡇⣿⢸⣷⢸⣿⡘⡘⣿⣿⣿⢰⣿⢱⢃⡀⠀⠀⠀⠈⠃⢹⠇⣿⠇⠆⡆⢰⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣀⠀⢿⣿⣿⣿⠀⠿⣿⣿⣿"
  echo "⣩⣴⠾⠛⣀⣭⡥⠶⠖⠋⠁⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⠀⢻⡇⢸⡟⣿⢸⡌⣿⡈⣿⡇⠇⣿⣿⣿⢸⠇⣾⣿⡇⢀⠀⠀⡷⢰⠸⢰⡿⠈⠀⡇⠘⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠈⠙⠒⠦⣭⡛⠸⣶⣬⡙⠿"
  echo "⣭⠴⠚⠋⠉⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠰⠘⣇⠈⢧⠹⡄⠳⣘⣃⣹⣃⣀⣹⣿⣟⣘⣸⣿⣿⣿⣦⣭⣼⣷⡏⠂⠁⠠⠘⢰⠃⢀⡄⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠉⠓⠦⣍⡛⢷"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠹⡐⡈⢆⠱⠸⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣷⢄⣀⠔⡀⡜⠀⢈⡇⡀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠲"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣤⡀⠈⢦⣀⠀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⣬⠁⠌⠀⣰⠀⣼⡇⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡈⠍⢣⡈⢿⣿⣿⣿⣿⣝⣛⣿⣿⣻⣿⣿⣿⣿⡿⢋⡼⠃⠘⣠⣾⣿⠀⢿⣷⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⣿⣿⣿⣿⣦⣀⡑⠀⠉⠻⢿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠉⠀⠛⣡⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠"
  echo "⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⣴⣷⣦⡙⢿⣿⣿⣿⣿⣿⡆⢀⡀⣌⡉⠛⠿⠛⣋⣥⡆⡨⠐⢶⣿⣿⣿⣿⣿⣿⠟⣋⣥⣦⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿"
  echo "⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣄⢛⠛⢿⣿⣿⡆⢆⢡⣬⡙⠗⣒⠻⢋⣥⡅⠔⠁⣾⣿⣿⡿⠿⠟⣡⣾⣿⣿⣿⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿"
  echo "⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠺⠿⠿⣿⣿⣿⣿⣿⠟⡉⢡⡌⣿⣿⣿⣿⡇⣾⣿⡆⢨⣄⠲⢮⡀⢿⣿⣆⣿⣠⣿⠟⠁⣢⣶⣶⡌⡅⣶⣿⡆⣿⣿⣿⠿⡏⣼⢙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿"
  echo "⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⢡⡞⠡⢤⣆⢈⠍⣷⣬⡁⠙⢿⡇⡜⣿⣿⡦⠉⠀⡁⠀⠀⠀⢀⠈⠛⢿⣿⣿⢃⢣⣿⠟⠐⣋⣿⠀⢄⣤⣙⣀⠳⣌⣛⡛⠛⠛⠛⠛⠛⠛⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿"
  echo "⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠺⢿⣿⣿⣿⡶⢸⡆⢼⣿⣿⡟⠀⣿⣷⡐⡘⢿⡀⠰⠟⠀⠀⣆⠀⠈⠻⠆⢀⡿⢃⢂⣾⣿⠀⢺⣿⣿⣷⠸⣿⠩⣥⣶⣾⣦⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿"
  echo "⢸⢻⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣯⣅⠰⣿⣇⠘⣿⣿⡇⠀⢨⠍⣿⣬⡊⠑⠄⢠⠆⢠⣿⠀⢣⡀⠀⡊⢔⣡⣟⢛⡁⠀⢸⣿⣿⠃⣾⣿⣷⠌⣩⣿⡙⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿"
  echo "⢸⣿⣿⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢛⠿⠝⢋⡬⠵⣷⠌⡃⠁⠀⣿⣷⣌⣛⡛⢶⣬⣤⠀⣀⣀⡀⢐⣢⣥⡖⠿⠿⢋⣼⣧⠀⢈⣬⠠⣄⣛⣛⠰⠾⠿⠟⢛⠓⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿"
  echo "⢸⣿⢿⣿⣿⣿⣷⣤⣶⣶⣴⣦⣤⣄⣀⣀⣀⣀⣊⡙⢷⡌⢭⣭⣤⡈⢰⣿⠀⣸⣿⣿⣿⣿⣿⣦⣭⡅⠀⣈⣋⡀⠨⣙⣩⣴⣾⣿⣿⣿⣿⡄⠸⣿⠆⠛⣛⣛⣛⠂⣴⡾⠢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣤⣾⣿⣿⣿⣿⣿"
  echo "⠠⠉⠉⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⣿⣿⣿⣶⣤⣼⣿⣿⣿⡄⠛⠀⣡⣬⣉⣴⣌⢛⣛⠻⣷⣴⠻⡟⣡⣶⡿⠿⠻⢛⣩⡙⣋⣍⠃⠀⡋⠐⣀⣿⣿⣇⣚⣡⣴⣿⣷⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⠀⠀⠀⠀⠑⠂⠈⠹⢻⣿⣿⣿⣿⣿⣿⣻⣿⣾⣿⣻⣿⣿⣿⣿⣿⣿⣷⠀⣴⣿⣿⣿⣿⣿⣿⣿⣧⣉⣍⠃⠁⣫⣭⣰⣿⣿⣿⣿⣿⣿⣿⣿⡀⡔⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠈⠛⠛⠻⠿⣿⣿⣿⣿⣿⣿⣟⣿⣿⣿⣿⡿⠐⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠉⠃⠈⠉⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⡿⣿⠿⠿⠿⠟⠛⠋⠉⠈"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠉⠉⠛⠛⠋⠛⢻⡿⢻⠻⠆⠰⣨⠻⡏⣿⣿⣿⣿⣿⣿⣿⣀⡄⢦⣴⣿⣿⣿⣿⣿⣿⣿⢻⣿⠟⡀⢸⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠛⠉⠙⠋⠙⠂⠐⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣈⡁⠀⠀⢀⣀⣉⣁⡂⠨⢉⣩⣭⣁⢶⠆⢈⣠⣤⣁⠉⡙⣛⢛⣛⣋⡉⣈⢡⠞⢀⡈⠉⣉⣉⣉⣉⠉⢉⣉⣉⣉⠙⠙⠉⠉⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡏⢹⡀⠀⢸⣇⣀⣀⠗⠀⢺⣄⣂⠙⠀⢰⡏⠀⠀⠘⣇⠀⣻⠈⠛⠋⠃⣿⠈⠀⢸⡇⠀⠀⢸⡇⠀⠀⢸⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠤⠬⣧⠀⢸⡏⠉⠉⣷⠀⣀⠈⠉⢹⡆⠸⣇⠂⠠⢢⡏⠀⢿⠀⠀⠀⠀⣿⠀⠀⢸⡇⠀⠀⢸⡇⠀⠀⢸⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠃⠀⠀⠘⠂⠘⠛⠛⠛⠁⠀⠈⠛⠒⠋⠀⠀⠈⠓⠚⠋⠀⠀⠘⠛⠛⠛⠀⠈⠓⠒⠋⠀⠀⠀⠘⠃⠀⠀⠘⠛⠛⠛⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⣠⣴⣾⣿⣿⣿⣶⣦⣄⠀⠀⠀⢰⣶⣶⡆⠀⠀⣶⣶⣶⣄⠀⠀⠀⠀⠀⣶⣶⡆⠀⠀⢰⣶⣶⣶⣶⣶⣶⣶⣶⣶⡆⠀⠀⣶⣶⣶⣶⡄⠀⠀⠀⠀⢰⣶⣶⣶⣶⠀⠀⠀⠀⠀⠀⢀⣶⣶⣶⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⢀⣼⣿⡿⠉⠀⠀⠈⠙⢿⣿⣧⠀⠀⢸⣿⣿⡇⠀⠀⣿⣿⣿⣿⣆⠀⠀⠀⠀⣿⣿⠀⠀⠀⢸⣿⣿⠉⠉⠉⠉⠉⠉⠉⠁⠀⠀⣿⣿⡟⣿⣷⠀⠀⠀⠀⣾⣿⢻⣿⣿⠀⠀⠀⠀⠀⠀⣼⣿⠏⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⣼⣿⣿⠀⠀⠀⠀⠀⠀⠘⠛⠛⠃⠀⢸⣿⣿⡇⠀⠀⣿⣿⡇⠹⣿⣦⠀⠀⠀⣿⣿⡇⠀⠀⣸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡇⢹⣿⡆⠀⠀⢰⣿⡏⢸⣿⣿⠀⠀⠀⠀⠀⣸⣿⡟⠀⢹⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⡇⠀⠀⣿⣿⣧⠀⠹⣿⣧⡀⠀⣿⣿⡇⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⣿⣿⡇⠀⣿⣿⠀⠀⣾⣿⠁⢸⣿⣿⠀⠀⠀⠀⢠⣿⣿⠃⠀⠈⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⢿⣿⣷⠀⠀⠀⠀⠀⠀⢀⣀⣀⡀⠀⢸⣿⣿⡇⠀⠀⣿⣿⡟⠀⠀⠘⣿⣷⡀⣿⣿⡇⢀⣤⢸⣿⣿⠠⣴⡀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡇⠀⠸⣿⡇⢠⣿⡏⠀⢸⣿⣿⠀⠀⠀⠀⣾⣿⣯⣤⣤⣤⣼⣿⣿⡀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠘⢿⣿⣧⣀⠀⠀⠀⣀⣼⣿⡟⠀⠀⢸⣿⣿⡇⠀⠀⢿⣿⣿⠀⠀⠀⠘⢿⣿⣿⣿⡇⡃⣿⢸⣿⣿⣈⣘⣡⣀⣀⣀⣀⡀⠀⠀⣿⣿⡇⠀⠀⢿⣷⣾⣿⠁⠀⢸⣿⣿⠀⠀⠀⣸⣿⡿⠻⠿⠿⠿⠿⢿⣿⣷⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠈⠛⢿⣿⣿⣿⣿⣿⠿⠋⠀⠀⠀⢸⣿⣿⠇⠀⠀⢼⣿⡿⠀⠀⠀⠀⠈⢿⣿⣿⡇⠃⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⣿⣿⡇⠀⠀⠘⣿⣿⡏⠀⠀⢸⣿⣿⠀⠀⢰⣿⣿⠇⠀⠀⠀⠀⠀⠘⣿⣿⣇⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠒⠂⠀⠀⠀⠀⠀⠀⠀⠀⠒⠒⠀⠘⠛⠛⠒⠒⠒⠒⠐⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠓⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
end

function greeting_goku
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⠙⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⡞⢹⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⣿⠀⠀⣸⣥⣸⠇⠀⠙⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⡇⠀⣴⡟⢸⢻⣀⢾⡿⣿⡿⠀⡀⠀⣞⢆⠀⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡹⢇⣼⡿⠁⣼⡼⢣⡿⢁⢿⡇⢠⡇⠀⢹⡘⡆⢰⣿⠀⠀⠀⠀⣼⡇⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠀⠀⣸⠏⡇⢸⣿⠇⠀⡼⣯⡿⠁⢸⠀⡇⣾⠀⠀⠀⣿⢹⡞⢹⣇⠀⣠⢾⣿⡇⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⣸⢏⢧⢀⣿⢠⡇⢺⣿⠀⣸⢡⡿⣁⠀⡘⠀⡇⣿⠀⠀⠀⡏⣾⡇⢸⠸⡞⣍⣿⢹⡇⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⢰⣆⠀⠀⢠⣿⢸⠘⣾⣏⢸⢧⠸⣽⡤⣷⡟⢠⡇⠀⡇⢠⣽⡿⠀⠀⠀⣹⣿⠁⢸⠀⠹⣿⠇⡌⡇⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⢾⣿⢧⡀⣼⡇⠘⡄⢹⣿⣼⠸⠀⢳⣻⡟⠀⡾⠁⠀⡇⠀⣿⡄⠀⢀⣾⡿⢃⡄⢸⠀⠀⢏⣰⡅⢹⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠘⣧⢻⢿⣿⠀⠀⢹⡀⢻⣻⠀⠃⠈⢿⡗⢠⣿⠀⠰⠇⠀⢸⢧⣴⣿⠋⢡⣿⠀⣼⠀⠀⠸⣇⠇⣸⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠹⡄⢰⠛⡇⠀⠀⢣⠘⡷⡇⠀⠀⢸⣿⣿⣳⠀⠀⠀⠀⠸⣼⣷⠣⣀⡾⠋⢀⠘⠀⠀⠀⡟⢀⣼⠀⠀⠀⠀⢀⣠"
  echo "⢠⣄⠀⠀⠀⢱⣸⠀⡇⢠⠀⠀⠃⠹⡝⣄⠀⢸⣿⣿⡫⠀⠀⠀⠀⣸⣿⢧⣾⠏⠀⢁⡎⠀⠀⠀⢠⣇⡞⡞⣀⢤⣴⣾⢽⡟"
  echo "⠈⣿⣷⢄⡀⠈⢿⢸⣧⠈⢧⠀⠀⠀⠹⣎⠳⣼⣿⣏⣯⡆⠀⠀⢀⣿⣿⣿⠃⠀⠀⣼⠀⠀⡴⢠⣿⡟⣺⡯⠟⣩⠜⢁⡜⠀"
  echo "⠀⢸⡌⢢⣈⠒⢼⣾⣇⢳⡈⢧⠀⠀⠀⠙⢷⣼⣿⣿⠟⠓⣠⣶⣻⠞⠋⠙⡆⠀⣀⡇⠀⢰⠁⣾⠟⡰⠁⣠⠞⣁⠞⡽⠀⠀"
  echo "⠀⠀⢷⡝⣍⠳⣄⠸⣿⡀⢷⡈⢣⣠⣤⣤⣾⡿⠋⢁⣶⣶⣿⠋⢀⡤⠤⣀⣿⣏⡁⢻⣦⠃⡼⣼⡜⠁⠚⢁⡴⢁⡜⠁⠀⠀"
  echo "⠀⠀⠈⣿⣌⠣⡈⡑⢿⣧⡀⣷⣿⠟⢉⡿⠋⢀⡴⢉⡾⠁⣀⣴⠿⢀⣤⣼⣿⣿⡄⠘⣿⢷⢱⠟⢀⢴⡿⠋⣠⠎⠀⠀⠀⠀"
  echo "⠀⠀⠀⠘⣿⣶⡌⠪⡢⣻⣿⣿⠃⠀⣾⠁⠰⠊⢠⣾⡟⢉⠽⠋⡰⠛⠙⠻⣿⣿⡇⠀⢸⣸⡝⣾⠝⣡⣼⠟⠁⢀⣀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠈⠻⣝⢦⣌⣻⣿⠁⠀⣾⡏⢠⠃⡴⣻⡿⡰⠃⣠⠞⠀⠀⠀⠀⢹⡟⠃⢀⣎⣏⢇⢸⣮⣿⢥⣴⣾⡿⠃⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⢤⣌⣓⣿⣿⣿⡀⢸⣿⡇⣸⡿⠀⢸⡿⢁⡔⠋⠀⠀⠀⢀⡠⢾⣧⣆⢎⣾⣿⣿⣿⣀⣬⠝⡿⠋⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠻⡳⣢⣽⣿⣿⢿⣿⣷⣿⡓⢦⣸⣷⠺⡄⠀⠀⡠⠞⠁⣠⣼⣿⣿⣿⣿⣽⣯⡿⣽⣮⠟⠁⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠈⠪⣙⢿⢹⣿⣿⣿⣟⠉⢳⣿⣧⣄⣸⡶⣎⣠⣶⣽⡾⠟⣫⠻⢿⣿⢀⣿⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⣳⣝⣿⣟⠻⠭⠭⠵⠶⠯⠟⡛⠛⡛⢒⣒⣉⡉⠁⢠⢟⣿⠾⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠿⣿⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⢀⣾⡛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⢯⡱⡄⠀⠀⠀⢛⣦⣆⡀⠀⠀⠀⠀⡞⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⡞⠀⢨⢿⣾⣄⠀⠀⠹⣶⠶⠁⠀⢀⣴⢯⠀⠈⡗⠢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⣠⣤⣤⠴⠋⢁⡠⡇⠀⠈⣦⠳⡌⣷⢤⡀⠀⠀⣠⠖⣩⣳⠃⠀⠀⡇⠀⠈⠢⣤⣤⢤⡀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠞⢹⠛⠁⣠⠞⣁⣤⠇⠀⠀⣟⢇⠙⣍⠙⣎⠩⠍⠁⡴⣱⠃⠀⠀⠀⠿⣄⠀⡀⠈⣿⠃⠃⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠈⢷⣎⣠⠛⢁⣀⡤⠤⠴⠧⢼⣆⣈⢣⡘⠆⣠⠞⢰⠃⣀⣀⣀⣀⡀⠈⠳⢅⣶⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠈⢦⣞⣉⣁⣀⣀⣀⡤⠤⠀⠀⠈⠉⠛⢺⡷⠒⣉⣉⣀⣀⠀⠀⠈⠉⣹⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⡋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⡀⠀⠈⠛⠓⡦⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠑⠒⠢⠬⠤⠤⠤⠤⠤⠤⠼⠭⠤⠤⠅⠒⠒⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
end

function greeting_lawliet
  echo "  ⠀⠀⢀⣤⣤⣤⣤⣤⣤⣀⡀⠀⠀⢀⣀⠄⠀⠀⣀⣠⣤⡤⠤⠀⠀⠀"
  echo "⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⣠⣾⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀"
  echo "⡼⠋⠁⠀⠈⠉⠙⠛⠛⠉⣡⣿⡟⠀⠀⣼⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⠁⠀⠀⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⠀⠀⠘⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⠀⠀⠀⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡀⠀⠀⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⢀⣤⣶⣶⣶⣿⣿⣿⣿⡇⠀⠀⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠈⠉⠉⠙⢿⣿⣿⣿⣿⡇⠀⠀⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⡇⠀⠀⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠶⢶⣶⣾⣿⣿⣿⠁⠀⢠⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⡏⠀⢀⣾⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡿⠀⢀⣾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⢀⣾⡟⢁⣴⣟⣡⣤⣤⣶⣶⣶⣶⣶⣦⣤⣀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⢠⣾⣟⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣴⠞"
  echo "⠀⠀⠀⠀⢀⣴⡿⠿⠛⠛⠋⠉⠉⠉⠉⠉⠉⠛⠛⠿⣿⣿⣿⣿⣿⠟⠁⠀"
  echo "⠀⠀⠀⠘⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⠟⠁⠀⠀⠀"
end

function greeting_onepiece
  echo "⠀⠀⠀⠀⣠⣶⣶⣶⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣶⣶⣶⣄⠀⠀⠀⠀"
  echo "⠀⠀⠀⢰⣿⠋⠀⠀⠉⢻⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⠋⠀⠀⠉⣿⣆⣀⠀⠀"
  echo "⢀⣶⣿⠿⠿⠀⠀⠀⠀⢠⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠛⠻⢿⣷⡄"
  echo "⢸⣿⠁⠀⠀⠀⠀⠀⠀⢻⣿⣆⠀⠀⠀⠀⠀⠀⢀⣀⣤⣶⣶⣿⣿⣿⣿⣿⠿⠿⠿⠿⣿⣿⣿⣿⣿⣷⣶⣤⣄⡀⠀⠀⠀⠀⠀⢀⣴⣿⠟⠀⠀⠀⠀⠀⠀⠀⣿⣷"
  echo "⠘⣿⣧⡀⠀⢀⣀⠀⠀⠀⠙⢿⣷⣄⠀⢀⣴⣾⣿⣿⠿⠟⠋⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠙⠛⠿⣿⣿⣷⣦⣀⠀⣰⣿⠟⠁⠀⠀⠀⣠⣀⠀⠀⣠⣿⠇"
  echo "⠀⠈⠻⠿⠿⠿⢿⣷⣄⠀⠀⠀⠙⣿⣿⣿⡿⠟⠋⠀⠀⣀⣠⣤⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣦⣤⣀⠀⠀⠉⠻⢿⣿⣿⣿⠋⠀⠀⠀⣠⣾⡿⠿⢿⣿⠿⠋⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠙⢿⣷⣄⣠⣾⣿⡿⠋⠀⠀⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣄⡀⠀⠙⠿⣿⣷⣄⣠⣾⡿⠃⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⡿⠋⠀⢀⣴⣿⣿⣿⣿⣿⡿⠟⠛⠉⠉⠀⠀⠀⠀⠀⠀⠈⠉⠙⠛⠿⣿⣿⣿⣿⣿⣦⡀⠀⠘⢿⣿⣿⣏⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⠟⠀⠀⣴⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣦⡀⠀⠙⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⠋⠀⢠⣾⣿⣿⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣄⠀⠘⢿⣿⣷⡀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⣾⣿⣿⠃⠀⢠⣿⣿⣿⣿⣿⣁⣀⣀⣤⣤⣤⣤⣤⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⢶⣤⣤⣤⣤⣤⣌⣿⣿⣿⣿⣿⣆⠀⠈⢿⣿⣷⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⢸⣿⣿⠃⠀⢠⣿⣿⣿⣿⡿⠛⠉⠉⠉⠀⠀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠉⠉⢻⣿⣿⣿⣿⣆⠀⠈⣿⣿⣇⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⣿⣿⡏⠀⢠⣿⣿⣿⣿⡿⠷⠶⠞⠛⠛⠛⠋⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠙⠛⠛⠛⠺⠿⠿⣿⣿⣿⣆⡀⠘⣿⣿⡄⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⢸⣿⣿⡶⠾⠛⠋⠉⠁⠀⢀⣠⣤⣶⡶⠶⠾⠛⠛⠛⠛⠛⠋⠉⠉⠉⠉⠉⠉⠙⠛⠛⠛⠛⠛⠛⠻⠿⠷⠶⢶⣤⠀⠀⠀⠈⠉⠛⠻⠿⣿⣇⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⢸⣿⣥⣤⣤⣀⣀⣀⣀⣰⣿⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣧⣀⣤⣤⣤⡤⠴⢶⣿⣿⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⣼⣿⡇⠀⢸⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⣠⣶⣿⣿⣿⣿⣶⣄⠀⠀⠀⠀⠀⠀⣠⣶⣿⣿⣿⣿⣷⣦⡀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡇⠀⢸⣿⣿⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⢿⣿⡇⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⣿⣿⣿⣿⣿⣿⡇⠀⢸⣿⣿⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⢸⣿⣷⠀⠀⣿⣿⣿⣿⣿⣿⣧⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⣸⣿⣿⣿⣿⣿⣿⠇⠀⢸⣿⣿⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⢸⣿⣿⠀⠀⢿⣿⣿⣿⣿⣿⣿⣇⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⢠⣿⣿⣿⣿⣿⣿⣿⠀⠀⣿⣿⡟⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠈⣿⣿⡇⠀⠘⣿⣿⣿⣿⣿⣿⣿⣦⠀⠙⢿⣿⣿⣿⣿⡿⠟⠁⠀⣀⣀⡀⠀⠙⠿⣿⣿⣿⣿⡿⠟⠁⣰⣿⣿⣿⣿⣿⣿⣿⡏⠀⢠⣿⣿⠇⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⢹⣿⣿⡀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠉⠉⠁⠀⠀⠀⢸⣿⣿⣿⠀⠀⠀⠀⠈⠉⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⣾⣿⡟⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠈⢿⣿⣷⡀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣀⠀⠀⠀⠀⠀⠈⠻⠿⠋⠀⠀⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⣼⣿⡿⠁⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠈⢿⣿⣷⡀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣤⣄⣀⣀⣀⣀⣠⣤⣤⡶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⣼⣿⡿⠁⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣄⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣅⣸⡏⠉⢹⡟⠛⢻⡋⠉⣿⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⢠⣾⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣷⣄⠀⠈⠻⢿⣿⣿⣿⣿⣿⡇⠈⣿⠛⠓⣿⠷⠶⢾⡗⠛⢻⡏⠀⣿⣿⣿⣿⣿⣿⠟⠉⠀⢀⣴⣿⣿⠿⣿⣦⡀⠀⠀⠀⠀⠀⠀"
  echo "⠀⣠⣶⣿⣿⣶⣶⣿⠟⠁⠈⠻⣿⣿⣷⣄⠀⠀⠙⠻⢿⣿⣿⡷⢴⣯⣀⣀⣿⠀⠀⢸⣇⣀⣠⣷⡶⣿⣿⣿⠟⠋⠁⠀⣠⣴⣿⣿⡟⠁⠀⠈⠻⣿⣶⡿⢿⣶⣄⠀"
  echo "⢰⣿⠋⠁⠀⠈⠙⠁⠀⠀⢀⣴⣿⠟⢿⣿⣿⣶⣄⡀⠀⠈⠙⢿⡀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠁⠀⢰⡟⠉⠀⠀⣠⣴⣾⣿⡿⠟⠻⣿⣦⡀⠀⠀⠈⠁⠀⠀⠙⣿⡆"
  echo "⢸⣿⡀⠀⠀⠀⠀⠀⠀⢴⣿⠟⠁⠀⠀⠈⠛⢿⣿⣿⣷⣶⣤⣀⣻⣦⣄⡀⠀⠀⠀⠀⠀⢀⣠⣴⣏⣠⣴⣶⣿⣿⡿⠟⠉⠀⠀⠀⠈⣻⣿⠆⠀⠀⠀⠀⠀⠀⣿⡇"
  echo "⠈⠿⣷⣦⣴⡆⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣾⣿⣿⣿⣿⣿⣿⠿⠟⠋⠁⠀⠀⠀⠀⠀⠀⢠⣿⡇⠀⠀⠀⠀⣶⣶⣾⠿⠁"
  echo "⠀⠀⠀⠉⣿⣇⡀⠀⣀⣾⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠙⠛⠛⠛⠛⠛⠛⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣷⣄⠀⠀⣠⣿⠇⠀⠀⠀"
  echo "⠀⠀⠀⠀⠈⠛⠿⠿⠿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⠿⠿⠟⠋⠀⠀⠀⠀"
end

function greeting_violet_evergreen
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣛⣿⣝⣻⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢯⣿⣿⣿⣿⣿⣿⣷⢽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣟⣛⠿⣿⣿⢎⡟⣫⣶⣷⣿⣷⣾⣵⣝⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣟⣭⣷⣿⠟⠻⠿⣷⣎⠊⣴⠿⣹⡶⣿⣽⣝⡿⢿⣿⣮⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣯⣵⣿⣿⡿⠟⣁⣐⣦⣥⡘⣿⣿⡷⢟⡛⠻⣯⣿⣿⣿⢷⣝⣻⣳⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣝⣻⣟⡛⢯⢿⣞⡿⣽⣿⣿⢟⣡⣾⡿⢩⣐⢦⣿⣿⣿⣿⣿⣷⣦⡈⠹⣿⣿⣷⣟⣷⢷⣮⡽⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣻⣽⡾⣿⣿⣿⡟⣷⣾⣿⢣⣶⣿⢟⣿⣿⣿⢿⣿⣿⣝⣿⣿⣧⡌⣿⣿⡿⣯⣿⡹⢭⡓⢾⣹⣻⣟⣻⣻⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣭⡿⣳⣯⡿⣿⣿⣟⣾⢯⣿⣣⣿⣿⡹⣟⣯⣿⣿⢺⣿⣷⢿⣞⢿⣿⣳⣌⢿⣿⡽⣷⣙⢦⡙⢣⣍⡻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣻⣾⡷⣽⣿⣟⣿⣿⣯⡾⣵⣟⣾⡿⣽⢷⢿⣿⣼⣿⣿⢼⡇⣿⣻⣹⣿⢯⣳⡝⣮⣷⢻⡌⢷⡊⢶⠁⢆⡙⠾⣽⡻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢟⣵⡿⣿⣾⠿⣗⣿⣿⢿⣿⢱⣿⣾⣟⣾⠟⣾⣻⢾⣿⣻⡿⣿⣇⡷⣇⢧⡹⣷⢣⠹⡌⢯⣗⢫⢒⡝⢦⣉⠢⢄⢣⠨⡙⢯⣝⣟⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠣⣿⣽⡾⣿⣽⢾⣿⣿⣟⣿⢇⣯⣿⡟⣾⠟⢸⡇⣿⡯⣿⣼⣿⢿⠇⡧⣿⢨⡒⠽⣏⠮⣙⢢⠹⡎⡜⣌⢣⠰⡁⢎⡄⢣⢧⣦⡙⠾⡽⣯⣷⣶⣶⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣽⣯⢷⣷⣼⣯⢿⣿⣿⣿⣾⡟⡜⣾⡟⣼⢏⢪⢹⣐⢻⣿⢽⡆⣿⡿⡸⠔⢻⢠⡙⡔⡹⣆⠣⢎⠥⣛⠴⣈⢇⡒⢍⢢⡘⢆⢚⣿⣿⣷⣜⠽⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⡿⣳⣿⣟⣾⣻⣾⢾⣯⣿⢯⡿⣦⣿⡇⢹⡿⣸⢃⣢⣿⣞⡸⣾⢿⣯⣷⢸⡹⢡⢣⣽⢲⣥⢊⡱⢌⠳⣈⠖⡬⠰⣍⠲⣠⢋⠴⡈⢎⡌⣻⣿⣿⣿⣷⡹⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⢻⣿⣟⡾⣧⠟⡽⢋⣾⠟⣾⣿⢻⣿⢈⡻⢡⠓⣼⣾⣿⢲⣽⣇⠞⣿⣎⡗⣸⠡⢾⣯⢻⣧⣗⡰⢉⠖⡌⠜⡄⠳⣸⠱⠤⢌⢂⠓⠄⡚⣤⣻⣿⣿⣿⣷⣹⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡾⣗⠞⢌⢹⡏⣾⣿⡟⣿⡟⢠⢋⡔⣚⣽⣯⢭⠮⣭⣭⢧⣹⢻⣜⠤⣋⡿⠣⣝⣿⣹⣚⡡⡜⢌⠣⢜⡰⢹⣇⢋⡰⢃⠎⡄⡱⢂⣳⡽⣿⣿⡿⣽⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⢳⣟⡾⡭⣸⡞⡟⣌⣿⢿⣁⣿⡝⡔⢊⠼⠍⠓⠋⠙⠓⢰⣜⣧⢳⡍⢿⣢⠱⣯⠱⠞⠐⠚⠛⠑⢎⢆⢓⡀⢳⣹⡇⢎⠄⣣⢃⠲⣽⡌⢼⣷⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⡟⣿⡷⣿⣿⢟⡗⡼⣟⣿⡄⣿⢹⠀⡍⠀⡔⢒⡀⠀⠄⣤⣟⣿⣞⣿⣤⡳⣒⣝⣿⣥⠒⠂⠀⣀⢠⠀⠢⣌⠓⣾⢡⡋⠴⠠⣃⠂⣿⣿⢸⣿⡏⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣷⡽⣿⣾⢶⢧⣿⣟⡇⢿⡘⣦⢽⣷⡻⣄⠽⣚⢣⣿⣿⣿⣿⣿⣷⣷⣧⣽⣿⣿⣌⠳⣖⢰⣾⣔⡳⢈⣳⡟⢢⡙⠂⢥⡂⠵⣌⢿⣻⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⢎⡟⡰⢏⢿⡹⡕⣒⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⢸⢣⡿⢌⠣⡜⠀⢒⢸⡆⣽⣾⡽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⢏⡴⡻⣞⠌⠻⣵⠊⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣓⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⡊⡾⢁⢎⡱⠠⡁⢎⡜⣷⢸⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣷⣵⣿⢧⣿⣿⢈⠳⡈⣓⢸⡽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣜⣻⢿⣿⣿⣿⣿⣿⣿⣿⣟⣧⢚⡞⡁⠇⢊⠄⠀⡥⠒⣌⠫⡟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⢿⣻⣵⣿⣿⣿⣿⣫⡿⣟⢬⢇⡑⠆⡁⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢇⡳⠈⠄⠌⡰⠀⢁⠐⢣⠜⣰⠩⠷⣽⣻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⡿⣥⢯⣿⣿⣿⣿⡟⣷⡟⣼⢣⡾⠤⢩⠐⠠⠌⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢏⠮⠁⢀⠰⣈⠴⠀⠄⣌⠠⠙⣄⠙⣆⠳⢯⣟⣯⢿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⡓⢮⣿⣿⣿⣟⣯⡾⢋⢼⣟⣾⢃⠧⢁⠌⡐⠠⢈⠻⣿⣿⣿⣿⣿⣿⣷⣶⠷⣶⣾⣿⣿⣿⣿⢿⡱⠊⠀⠌⢀⠰⢂⠳⢬⡐⠘⣷⣦⡈⠖⢦⡝⢌⢻⣿⣧⢹⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⡌⣿⣽⣳⠟⣜⣾⢯⢯⣿⢃⠣⠀⡆⠰⢀⠃⣴⣇⠈⠻⢿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⠿⡋⠆⠁⠐⠈⡀⠢⣉⢎⡱⢚⣿⣤⡉⠿⣿⡆⡙⣿⣿⣐⢻⡿⢠⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⡟⣿⡿⣾⢯⣿⣿⣟⣾⢳⠓⡂⣬⠓⣤⣿⠀⢺⣿⠇⡀⢂⡷⣩⠻⢿⣿⣿⣿⣿⣿⠻⢁⢣⡙⡀⠂⠌⠸⡄⢠⠃⣷⣈⢇⠺⣿⣿⣷⣦⡝⣸⢿⣿⣿⣎⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⡟⣿⣷⡿⣿⣿⣽⣿⡏⢆⡡⢟⣣⣶⣿⣿⣴⠸⡏⡀⢤⠂⣿⣧⣏⠧⣍⡛⠟⠉⢠⡰⣉⠶⣩⠐⡄⠘⢆⡹⢦⡘⢹⣯⢮⢡⠛⣿⣿⣯⣵⣿⣯⢿⣿⣧⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣳⢳⣿⡇⢦⣾⣿⣿⣿⣿⣿⣿⠓⡰⠀⠸⣿⣯⡿⣿⣯⡲⣝⡲⣍⢦⡱⢭⢚⡥⡚⠅⠀⠘⢿⢢⣧⡋⣽⣿⣧⡩⠘⡝⢿⣿⣿⣟⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣻⢿⣿⡇⣿⣿⣿⣿⣿⣿⡿⢉⠖⡡⠀⣹⣻⡟⢿⣶⣍⡻⢦⣛⢬⣣⠝⡮⢜⡲⣙⠆⠀⢀⠈⠧⣿⣷⣌⡻⣥⣗⠩⣮⡒⡻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣿⣞⣬⠻⣞⠿⡿⣫⣿⠟⡁⢎⡜⠡⠐⠦⣍⢻⣦⡙⢿⠳⣣⢾⡿⣱⢋⡔⣫⠴⢁⠎⠀⠀⠀⠀⠌⠻⣿⣿⣷⡾⢡⣿⣷⢡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⢮⣭⡷⠟⢡⠒⢈⡒⠬⡑⠀⢩⢿⣦⢭⡛⠬⢓⣎⠊⡤⢡⠳⠌⣡⠒⡭⠂⠀⠀⠀⠀⠀⠀⠹⢿⣿⡇⣽⣿⣿⣇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢛⠩⢅⠎⣅⠋⢦⢉⡒⣉⠆⠸⣬⡙⠿⣗⢸⠙⠃⠀⠡⢰⣁⠮⡱⣉⠄⣀⠒⠀⠀⠁⠀⠈⠀⠀⠉⠚⠻⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⣛⢩⢡⠒⡌⠃⣨⠊⡜⡄⣋⢆⠣⢜⡠⢃⠄⢳⣻⣧⣾⡌⠅⠐⣄⠃⢀⠭⣶⣑⠌⣐⠢⠁⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⠟⡩⢄⠰⣐⠣⢌⡂⢣⠍⠤⡙⢠⠓⡬⡐⢆⡊⡱⢊⠴⡉⢆⣠⣿⡟⣱⢸⠜⠑⠀⡀⣎⠖⡭⣿⣦⣡⠁⠈⡜⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠻⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⠏⡬⡑⢆⠓⡌⢓⠬⡘⠥⢊⠕⡨⠃⡚⢤⠙⡢⢑⠅⠈⢦⢙⣶⣿⡟⡼⢡⣟⠢⣯⡌⢇⢺⣯⡔⡻⣿⣷⣍⢦⡀⠀⠁⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿"
  echo "⣿⣿⡯⡘⡔⡩⢜⡀⢎⡱⠈⡕⣊⠡⢎⡱⠤⣉⢆⠣⢅⠋⠀⠈⣲⣾⣿⣿⣼⡯⣹⣟⣸⣿⣷⢭⢸⣿⣿⡴⡁⠉⢿⣄⠙⢦⡀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠸⣿⣿⣿"
  echo "⣿⣿⢡⠱⣌⠑⡆⢦⠐⠥⢘⡰⣁⠖⡀⠢⠱⡌⢢⠉⠆⠀⠁⣼⣿⡿⢋⠹⣿⡇⣿⣏⡿⠛⣿⣮⢹⣿⣿⣷⡱⣈⣼⣿⣿⣷⣿⣶⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿"
  echo "⣿⡏⢢⠱⡌⢣⠘⢢⠜⡱⠀⡖⢠⠚⡌⡱⢀⠈⠐⢃⢆⣀⣿⣿⣿⠁⠆⣞⣿⢿⣿⣽⣧⠱⣘⣿⡼⣿⣿⣿⣕⢣⠞⣿⣿⣿⡛⣿⠿⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿"
  echo "⣿⠸⣠⠓⡌⢣⡀⠃⡎⠴⣀⠃⢢⡙⠴⡁⢇⠚⠤⣀⢠⣾⣿⣿⣿⣷⣬⢾⡿⣌⡟⣾⢻⣷⣿⣿⣧⢻⡹⣿⣿⣧⢛⡜⣿⣿⡽⠀⡏⠆⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠰⠀⣿⣿"
  echo "⡏⡶⡇⠭⣘⠠⢆⠀⠘⠰⠤⡁⠆⣍⢒⡑⡊⡍⢒⠤⢋⠲⣩⢻⣿⣿⢏⠞⡷⣘⢦⣿⢣⣿⣿⡿⢿⣇⠳⣍⢿⡏⠡⢞⡹⡈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⢻⣿"
  echo "⢸⡷⣇⠓⡌⠆⢑⡊⠀⠄⡓⠀⡣⢒⠌⡔⠱⡈⠥⡊⡜⢠⠑⠂⠀⠈⢎⡹⣱⢃⢸⣿⣷⣿⣿⠀⢆⠹⣎⠵⠊⢷⣽⡆⠱⠁⠀⠀⠀⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠳⡘⡨⣿"
  echo "⣟⣿⢯⡘⠴⣉⢂⠨⡑⡀⠘⢠⡑⣊⠜⣨⠑⡌⡅⠱⢌⠣⠜⡰⣀⡀⢎⡱⢎⠞⣸⣿⣿⡿⢟⠊⢆⢖⡉⢦⣀⢎⡻⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢠⠣⣍⠔⢿"
  echo "⢿⣽⡾⣆⠱⠠⢃⢆⠀⠡⠀⢠⠓⣄⢋⡔⢡⢂⠘⢡⠎⣑⢊⡱⠰⣐⠢⣀⠉⠈⠸⣐⠶⡸⢥⡂⠈⠢⠙⠦⠉⠊⠀⠀⠀⠀⠀⡀⠄⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢇⡚⢤⡋⡼"
end

function greeting_chibi
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠓⠶⣤⠀⠀⠀⠀⣠⠶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀⢠⡏⠀⠀⢀⡔⠉⠀⢈⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠩⠤⣄⣼⠁⠀⣠⠟⠀⠀⣠⠏⠀⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠁⠀⠀⠣⣤⣀⡼⠃⠀⢀⡴⠋⠈⠳⡄⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⣿⡿⠿⠿⠟⠛⠛⠛⠛⠿⠿⣿⣿⣶⣤⣄⠀⠀⠀⠉⠀⢀⡴⠋⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⠿⠋⠉⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠻⢿⣿⣶⣄⠀⠀⠳⣄⠀⣠⠞⢁⡠⢶⡄⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⠿⠋⠀⠀⢀⣴⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⢤⡈⠛⢿⣿⣦⡀⠈⠛⢡⠚⠃⠀⠀⢹⡆⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⠟⠁⠀⠀⠀⢀⣾⠃⠀⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡆⠀⠀⢻⣦⠀⠙⢿⣿⣦⡀⠈⢶⣀⡴⠞⠋⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⣠⣿⡿⠃⠀⠀⠀⠀⢀⣾⡇⢀⡄⠀⢸⡇⠀⠀⠀⠀⠀⠀⣀⠀⢸⣷⡀⠀⠀⠹⣷⡀⠀⠙⢿⣷⡀⠀⠉⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⣰⣿⡟⠀⠀⠀⠀⠀⠀⣾⣿⠃⣼⡇⠀⢸⡇⠀⠀⠀⠀⠀⠀⣿⠀⢸⣿⣷⡀⠀⢀⣾⣿⡤⠐⠊⢻⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⢠⣿⣿⣼⡇⠀⠀⠀⠀⢠⣿⠉⢠⣿⠧⠀⣸⣇⣠⡄⠀⠀⠀⠀⣿⠠⢸⡟⠹⣿⡍⠉⣿⣿⣧⠀⠀⠀⠻⣿⣶⣄⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⢸⣿⣿⡟⠀⠀⠀⠀⠀⣼⡏⢠⡿⣿⣦⣤⣿⡿⣿⡇⠀⠀⠀⢸⡿⠻⣿⣧⣤⣼⣿⡄⢸⡿⣿⡇⠀⠀⢠⣌⠛⢿⣿⣶⣤⣤⣄⡀"
  echo "⠀⠀⠀⣀⣤⣿⣿⠟⣀⠀⠀⠀⠀⠀⣿⢃⣿⠇⢿⣯⣿⣿⣇⣿⠁⠀⠀⠀⣾⡇⢸⣿⠃⠉⠁⠸⣿⣼⡇⢻⡇⠀⠀⠀⢿⣷⣶⣬⣭⣿⣿⣿⠇"
  echo "⣾⣿⣿⣿⣿⣻⣥⣾⡇⠀⠀⠀⠀⠀⣿⣿⠇⠀⠘⠿⠋⠻⠿⠿⠶⠶⠾⠿⠿⠍⢛⣧⣰⠶⢀⣀⣼⣿⣴⡸⣿⠀⠀⠀⠸⣿⣿⣿⠉⠛⠉⠀⠀"
  echo "⠘⠛⠿⠿⢿⣿⠉⣿⠁⠀⠀⠀⠀⢀⣿⡿⣶⣶⣶⣤⣤⣤⣀⣀⠀⠀⠀⠀⠀⠀⢀⣭⣶⣿⡿⠟⠋⠉⠀⠀⣿⠀⡀⡀⠀⣿⣿⣿⡆⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⣼⣿⠀⣿⠀⠀⠸⠀⠀⠸⣿⠇⠀⠀⣈⣩⣭⣿⡿⠟⠃⠀⠀⠀⠀⠀⠙⠛⠛⠛⠛⠻⠿⠷⠆⠀⣯⠀⠇⡇⠀⣿⡏⣿⣧⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⢿⣿⡀⣿⡆⠀⠀⠀⠀⠀⣿⠰⠿⠿⠛⠋⠉⠀⠀⢀⣴⣶⣶⣶⣶⣶⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣧⠀⠀⠀⣿⡇⣿⣿⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⢸⣿⡇⢻⣇⠀⠘⣰⡀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⢸⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⠀⠀⠀⣿⣧⣿⡿⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠈⣿⣧⢸⣿⡀⠀⡿⣧⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⣿⡄⠀⠀⠀⣼⡇⠀⠀⠀⠀⠀⠀⢀⣤⣾⡟⢡⣶⠀⢠⣿⣿⣿⠃⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠹⣿⣿⣿⣷⠀⠇⢹⣷⡸⣿⣶⣦⣄⣀⡀⠀⠀⠀⣿⡇⠀⠀⢠⣿⠁⣀⣀⣠⣤⣶⣾⡿⢿⣿⡇⣼⣿⢀⣿⣿⠿⠏⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠈⠛⠛⣿⣷⣴⠀⢹⣿⣿⣿⡟⠿⠿⣿⣿⣿⣿⣾⣷⣶⣿⣿⣿⣿⡿⠿⠟⠛⠋⠉⠀⢸⣿⣿⣿⣿⣾⣿⠃⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣦⣘⣿⡿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠛⠛⠻⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀"
  echo "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⣿⣿⣿⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
end

function greeting_call_of_the_night
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢟⣫⣽⣶⣶⣶⣆⠠⣉⣴⣾⣿⣿⣿⣷⣶⠈⠍⠙⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣾⣿⣿⣿⣿⣿⣿⡌⠘⡿⠟⠻⢿⣿⣿⠿⠟⢸⣿⣿⡇⠁⢾⣿⣿⣿⣿⣿⡞⣿⣿⡿⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣫⠛⠋⣠⣾⣿⣿⣿⢡⣻⡏⢣⠀⣷⡄⣴⣿⣿⢣⡆⠸⢸⣿⡿⠁⣰⣷⣦⡌⢿⣿⣿⣿⢸⣿⠇⠿⢿⠟⠋⣩⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢋⣥⣾⣿⣿⣷⣦⡹⣿⣿⣿⠘⡧⡇⠈⠀⡿⠟⠘⢛⣛⣘⡀⣘⣿⣟⣀⡀⠿⢿⢛⢅⡤⣿⣿⣿⡇⡿⠀⠀⠀⠠⢌⣒⣶⣖⡂⢩⣽⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣴⣿⣿⣎⢿⣿⡿⢻⣧⠰⣾⣁⠀⣸⣷⡨⠐⠒⣒⡭⠅⡀⠙⠻⢶⣮⣝⡫⢙⢿⣶⡶⢦⣀⠉⢿⣿⡇⠁⠀⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⠡⣾⣿⣿⣿⣿⣆⠹⣀⢘⡛⠃⠉⢀⠔⣩⡿⠁⢻⣶⣤⣵⣄⢦⢡⡠⢄⠙⢿⣿⣶⣅⠙⢷⣦⡙⠳⣄⠙⢁⡀⢀⣡⣤⣤⣤⡈⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣧⢻⣿⠿⣿⣿⣿⣦⠘⢈⠜⠁⠀⣠⣾⣿⠃⢠⣽⣏⢻⣿⣿⣧⡂⢿⣷⣄⠱⣽⣿⣿⣿⣆⠹⡹⣦⣀⠀⠀⠐⢎⣉⠛⢿⣿⣿⣷⡑⢻⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⢃⣿⡐⢮⡙⢛⣛⡃⠀⠀⠀⣰⣿⣿⠃⠀⣼⣟⣿⡇⢻⣿⣿⣷⡈⢿⣿⡛⣷⠹⣿⣿⣿⣧⡀⢻⢻⣷⣄⠀⠈⢻⣿⡆⡍⠉⠙⢿⣌⣿⣿⣿⣿⣿⣿⣿"
  echo "⡙⣿⣿⣿⣿⣿⣿⡟⣡⡏⠀⠀⠀⢨⣂⠙⠑⢀⡄⢀⣿⣿⣿⠀⡄⣿⢸⣿⡟⡄⢹⣿⣿⣷⡘⣿⡇⢸⣇⠹⣿⣿⣿⣿⠀⣧⣹⣿⣷⣄⠀⠀⢤⡀⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣮⠻⣿⣿⣿⣟⠀⣿⣿⣶⣾⣿⡆⠿⠁⢠⡾⠁⣸⣿⣿⡇⢰⢿⣿⢸⣿⣿⢰⣠⣿⣿⣿⣧⣸⣷⠀⣇⠀⢹⣿⣿⢹⠀⢸⣧⠡⡹⣿⣷⠑⠌⢻⣾⣶⣄⠈⠹⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣷⣝⠻⣿⣿⣇⣿⣿⣿⡟⢋⣠⠀⢠⢟⡼⠃⣿⣿⣿⡇⢸⢸⣿⠈⣿⣿⡈⣿⡏⢻⣿⣿⡇⢿⠀⣿⠀⠈⣿⣿⡸⠀⠀⢻⣇⢱⠙⣿⣇⠈⢆⠉⢉⣛⡃⠠⠘⢿⣿⣿⣿⣿"
  echo "⣄⠉⠙⠻⢦⡈⢻⣿⡘⠿⠋⠔⠛⠋⠀⢏⠞⣱⠀⣿⣿⣿⡇⢸⢸⡟⠀⣿⣿⡇⢹⣇⠀⢻⣿⣿⣸⠀⣿⠀⠀⢸⣿⡇⠀⠀⠘⣿⡎⠀⠛⣿⠀⠘⡆⠀⠙⠻⣿⣶⣤⣙⡻⣿⣿"
  echo "⣭⣭⣄⡀⠀⠈⠀⠙⣿⣆⠀⠀⠠⠃⢰⠊⣼⠏⢠⣿⣿⣿⣇⠀⢸⡇⠀⣿⣿⡇⣿⣿⠀⢆⢻⣿⡇⠀⣿⠀⠀⢸⡿⠀⠾⠞⠂⠛⣣⣦⣆⢹⠀⠀⠸⣦⠀⢀⠀⠀⠀⣀⠀⣿⣿"
  echo "⠭⠭⣛⣛⠻⠶⢤⡀⠈⠻⠀⠀⠀⠀⠈⠞⢡⡆⢰⣿⣿⣿⣿⡀⢺⣿⠀⣿⣿⡇⣿⣿⢠⠘⡌⣿⠇⣠⠿⣀⣵⢆⠏⠀⠀⠨⣭⣭⣑⡒⠀⠈⠁⠀⠂⢿⣇⠀⠀⠉⠂⠀⠁⣿⣿"
  echo "⠿⠗⣒⣂⣤⣤⠄⠀⠀⠀⠀⠀⠀⡀⣀⣴⣿⡇⠈⣿⡿⣿⣿⡇⢸⣿⠀⣿⣿⢧⢹⡿⠼⢀⣁⣙⠺⢶⣿⣿⣿⡸⣤⡀⠠⢰⢸⣿⡿⠇⢶⠠⡀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠸⣿"
  echo "⡶⢖⣒⣭⡥⠖⠋⠁⠀⠀⠷⠐⠀⠘⣿⣿⣿⣇⢀⢹⣿⠘⣿⣧⠘⣿⠀⣿⡿⠸⠈⠁⠉⣐⣤⣀⢐⣛⣿⣿⣿⣷⣬⣿⣶⣤⣭⡁⣄⣠⣴⡆⠃⠀⠀⢸⣿⠀⢀⠀⠀⠀⠀⠀⢹"
  echo "⣶⡿⠿⠁⠀⠀⠀⠀⠀⠀⣁⠀⠠⡁⣦⣭⣭⣿⡘⡎⣿⣧⠘⣿⣇⠹⠀⣿⠀⠋⠀⠐⠛⢿⣿⡿⠃⣿⣿⣿⣿⢰⠖⣩⡏⢿⣿⣿⣿⣿⣿⣿⡆⠀⠀⢸⠏⢷⡰⣄⠀⠀⠀⠀⠘"
  echo "⡇⠀⠀⠀⠀⠀⠀⡀⠀⡀⢻⡷⢰⣧⠘⠿⠟⠋⠁⠻⠘⣿⣧⡘⣿⣄⠡⠀⠀⡀⠆⡭⢨⢸⠟⢁⣾⣿⣿⣿⣿⣶⣾⡟⣿⢘⣿⣿⣿⣿⣿⣿⣧⠀⠀⣸⠀⠈⠃⠘⢿⣦⠀⢀⠀"
  echo "⠁⠀⠀⠀⠀⠀⣰⣿⣿⡇⠘⢇⣿⣿⠀⡈⠻⣿⣿⡀⢷⠹⣿⣇⠘⠖⡀⠂⠸⠿⠦⠀⡒⢠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣾⡿⠿⣿⣿⣿⣿⡏⠁⠈⠉⠁⠀⢢⣄⣀⡙⠳⢤⣄"
  echo "⠀⠀⠀⠂⠀⣾⣿⣿⣿⠀⣶⣄⢻⠃⠀⠿⠶⠌⠻⠧⠈⣦⠹⣿⣷⣄⢥⣦⡀⢿⣄⣠⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠩⠒⠀⣼⣿⣿⣿⡇⠀⠀⠀⠀⠀⢸⣿⣿⣿⣶⣶⣶"
  echo "⠀⠀⠀⢀⣼⣿⣿⣿⣿⡇⠘⣧⡀⢸⡀⢀⠉⠛⣛⡛⡀⣌⢧⠘⣿⣿⣷⣝⠻⣄⠈⢛⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⠀⠀⠀⠀⣿⣿⣿⣿⢣⡆⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿"
  echo "⠠⠀⡇⡄⣿⣿⣿⣿⣿⢣⣷⡜⠃⣼⡧⢈⡳⣦⠀⠴⠶⠸⣎⢣⡈⢿⣿⣿⣷⣍⠳⠆⠍⠓⠶⠾⢿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⣿⣿⣿⡏⣼⠁⠀⣠⠀⠀⣸⣿⣿⣿⣿⣿⣿"
  echo "⡸⠃⠐⠀⣿⣿⣿⣿⣿⢸⣿⣷⠠⣿⡇⠀⠻⣦⡌⡁⣠⠄⢹⡆⠑⢄⠻⣿⣿⣿⣷⣤⡀⠒⢶⣶⣶⣿⣿⣿⣿⡇⢀⣤⣄⠑⢦⡀⣿⣿⠟⣸⣧⣾⣾⣿⠀⣰⣿⣿⣿⣿⣿⣿⣿"
  echo "⢀⣤⠀⢀⣿⣿⣿⡿⠋⡐⣿⣿⡇⠛⣠⣷⣄⠐⢥⡀⠹⣈⣀⢻⣆⢮⡢⡙⢿⣏⡛⠿⠿⠷⠴⣭⡙⠛⠿⣿⣿⣿⡌⠙⣿⣷⣮⣇⢻⠟⡰⣿⣿⣿⣿⣿⣼⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣴⣿⡆⠶⣬⢻⣿⣄⢰⣿⣮⠻⣧⣤⠉⠻⠿⠿⠦⠍⠀⠙⠃⠀⢿⡷⠙⢮⡀⠙⢿⣄⠐⢶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣦⣈⣙⡛⢿⠘⠀⠀⢬⡙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⡄⢴⣿⣿⠶⠘⠏⣴⢸⣿⡿⠱⠞⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⡆⠀⠉⠂⠀⠙⢦⡈⠹⣆⠀⠈⠉⠛⠛⠻⠿⠿⢿⣿⣿⡗⠀⠀⠀⠡⡄⢳⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣶⡄⣰⣿⣿⣷⣿⡆⠟⣠⢀⣴⣶⣆⢻⣶⣦⣄⡀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠐⠥⣈⠳⢄⠙⢷⣄⠀⠀⣀⣤⡶⠀⠀⠀⠀⣀⡀⠀⠀⠀⠈⢀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣷⣮⣍⣉⠈⢋⣚⣛⠁⢸⣿⣿⢿⣦⠹⣿⣿⣿⣿⣶⣤⣴⣤⡄⢀⠀⠀⢀⡀⢻⣦⣤⡀⠀⢀⣈⣛⠿⣿⡟⣁⠀⠀⠈⣎⢿⢇⡄⢿⡐⢀⠈⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡈⢹⣷⣄⡙⠧⢹⣿⣿⣿⣿⣿⣿⣿⡇⠟⣡⣶⣿⡇⠘⣻⢿⣷⣌⠲⣦⣽⣿⣾⡇⠻⣷⣦⡀⢸⡎⣼⡇⢸⣿⡏⠄⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢰⣿⣿⣿⣦⡘⢿⣿⣿⣿⣿⣿⠟⣡⣾⣿⣿⣿⣿⣄⠻⡀⠙⠻⣷⣌⡛⠿⣿⣿⣦⣽⣿⣿⢸⣷⠸⡇⢸⣿⣿⡄⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠘⣩⣵⡶⣶⡆⠀⠹⣿⣿⣿⠇⣼⣿⣿⣿⣋⣉⣩⣿⣧⡈⠀⢐⢮⡛⢿⣶⣤⣉⣛⣿⠿⠏⠼⠿⡇⢃⣸⣿⣿⣷⡄⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡜⢛⣅⣴⣿⣧⡉⠠⡀⠻⢃⡾⠟⣛⠻⠯⠩⠭⠭⣽⣿⣿⣦⡀⠁⠙⢷⣬⡛⢿⣿⣿⢋⣄⠀⠀⠈⠄⢿⣿⣿⣿⣷⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  echo "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠻⢠⣾⣿⡿⠟⡩⠶⠛⠓⠈⢠⡀⠈⠛⠿⢿⣿⣿⣿⣷⣬⣲⣾⣿⣿⣆⠀⠙⢿⣿⣿⣿⡏⠀⠀⠉⠀⠀⢠⡀⠻⣿⣿⣿⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿"
end

# Include all other greeting functions...
# greeting_chad_cat, greeting_eva_asuka, greeting_eva_rei, greeting_gear_five,
# greeting_rinachi, greeting_luckystar, greeting_pochita, greeting_owlkalinevt

# =============================================================================
# Configuration and Utility Functions
# =============================================================================

# Function to list all available greetings
function list_greetings -d "List all available greeting options"
  echo "Available ASCII art greetings:"
  echo "  • freiren      - Frieren from Sousou no Frieren"
  echo "  • zero_two     - Zero Two from Darling in the FranXX"
  echo "  • space_cat    - Space-themed cat"
  echo "  • itachi       - Itachi from Naruto"
  echo "  • chad_cat     - Chad cat meme"
  echo "  • eva_asuka    - Asuka from Evangelion"
  echo "  • eva_rei      - Rei from Evangelion"
  echo "  • gear_five    - Luffy Gear 5 from One Piece"
  echo "  • nekoman      - Nekomangin text logo"
  echo "  • rinachi      - Rinachi character"
  echo "  • luckystar    - Lucky Star character"
  echo "  • pochita      - Pochita from Chainsaw Man"
  echo "  • owlkalinevt  - OwlkalineVT character"
  echo ""
  echo "Usage: set_greeting <name>  or  display_random_greeting"
end

# Function to disable greeting
function disable_greeting -d "Disable fish greeting"
  function fish_greeting
    # Empty function - no greeting displayed
  end
end

# Function to restore greeting
function enable_greeting -d "Re-enable fish greeting"
  functions -e fish_greeting
  # This will use the default fish_greeting function defined above
end
