# Dart and Flutter configuration
[[language]]
name = "dart"
scope = "source.dart"
injection-regex = "dart"
file-types = ["dart"]
shebangs = ["dart"]
roots = ["pubspec.yaml", "pubspec.yml"]
comment-token = "//"
language-servers = ["dart-lsp"]
indent = { tab-width = 2, unit = "  " }

[language-server.dart-lsp]
command = "dart"
args = ["language-server", "--client-id", "helix"]

[language-server.dart-lsp.config]
enableSnippets = true
renameFilesWithClasses = "always"
completeFunctionCalls = true
showTodos = true
format = true

# Rust configuration
[[language]]
name = "rust"
scope = "source.rust"
file-types = ["rs"]
roots = ["Cargo.toml"]
language-servers = ["rust-analyzer"]
indent = { tab-width = 4, unit = "    " }

[language-server.rust-analyzer]
command = "rust-analyzer"
# command = "$HOME/.cargo/bin/rust-analyzer"
args = []
environment = { "RUST_LOG" = "error" }

# Optional rust-analyzer specific config
[language-server.rust-analyzer.config]
cargo = { allFeatures = true }
completion = { postfix = { enable = true }, snippets = { enable = true } }
checkOnSave = { command = "clippy" }                                       # Enables clippy checks on save

[language-server.rust-analyzer.config.check]
command = "clippy"

# Godot
[language-server.godot]
command = "nc"
args = ["127.0.0.1", "6005"]

[[language]]
name = "gdscript"
language-servers = ["godot"]

# ruby
[[language]]
name = "ruby"
formatter = { command = "rubocop", args = [
  "--stdin",
  "foo.rb",
  "-a",
  "--stderr",
  "--fail-level",
  "fatal",
] }

[language-server.solargraph]
command = "solargraph"
args = ["stdio"]
config = { diagnostics = true, formatting = false }

# Php
[[language]]
name = "php"
scope = "source.php"
formatter = { command = "php-cs-fixer", args = ["fix", "--using-cache=no", "--quiet"] }
auto-format = true

[language-server.intelephense]
command = "intelephense"
args = ["--stdio"]

# go
[[language]]
name = "go"
roots = ["go.work", "go.mod"]
auto-format = true
formatter = [  "goimports" ]
comment-token = "//"
language-servers = [ "gopls", "golangci-lint-lsp" ]

[language-server.golangci-lint-lsp]
command = "golangci-lint-langserver"

[language-server.golangci-lint-lsp.config]
command = ["golangci-lint", "run", "--output.json.path", "stdout", "--issues-exit-code=1"]

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = false }

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server]
command = "vscode-css-language-server"
args = ["--stdio"]

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[[language]]
name = "scss"
scope = "source.scss"
injection-regex = "scss"
file-types = ["scss"]
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = [ "vscode-css-language-server" ]
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "typescript"
language-servers = [ "typescript-language-server", "eslint"]
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
auto-format = true


[[language]]
name = "tsx"
language-servers = [  "eslint"]
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
auto-format = true

[[language]]
name = "javascript"
language-servers = [ "typescript-language-server", "eslint"]
 formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
auto-format = true

[[language]]
name = "jsx"
language-servers = [ "typescript-language-server", "eslint"]
 formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
auto-format = true

[[language]]
name = "json"
 formatter = { command = "prettier", args = [ "--parser", "json" ] }
auto-format = true

[[language]]
name = "html"
language-servers = [ "vscode-html-language-server" ]
formatter = { command = 'prettier', args = ["--parser", "html"] }
auto-format = true

[[language]]
name = "css"
file-types = ["css", "less"]
language-servers = [ "vscode-css-language-server" ]
formatter = { command = 'prettier', args = ["--parser", "css"] }
auto-format = true

# VUE
[[language]]
name = "vue"
file-types = ["vue"]
injection-regex = "vue"
roots = ["package.json"]
scope = "text.html.vue"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "vue"] }
language-servers = ["typescript-language-server"]

[[language-server.typescript-language-server.config.plugins]]
name = "@vue/typescript-plugin"
location = "/usr/local/lib/node_modules/@vue/language-server/"
languages = ["vue"]
